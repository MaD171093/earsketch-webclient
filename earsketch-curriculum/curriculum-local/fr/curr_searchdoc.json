[
    {
        "title": "Commencer avec EarSketch",
        "id": "/fr/v2/getting-started.html",
        "text": "Dans ce chapitre, vous apprendrez comment fonctionne EarSketch, comment placer des sons (clips) dans votre musique et comment d\u00e9boguer votre code."
    },
    {
        "title": "D\u00e9couvrir EarSketch",
        "id": "/fr/v2/getting-started.html#discoverearsketch",
        "text": "Dans EarSketch, vous donnerez des instructions \u00e0 l\u2019ordinateur en \u00e9crivant du code. Une ligne de code repr\u00e9sente une instruction. L\u2019ensemble des instructions est appel\u00e9 le programme (ces instructions peuvent aussi \u00eatre appel\u00e9es un algorithme). Tout comme il est possible de suivre une recette dans un livre de cuisine pour obtenir un plat cuisin\u00e9, l\u2019ex\u00e9cution d\u2019un programme dans EarSketch permet de composer une chanson. Mais o\u00f9 va le code dans le programme ? D\u00e9couvrez-le dans la vid\u00e9o ci-dessous !"
    },
    {
        "title": "Cr\u00e9er votre premier script",
        "id": "/fr/v2/getting-started.html#createanewscript",
        "text": "Dans EarSketch, chaque script que vous \u00e9crivez correspond \u00e0 une chanson. Voyons comment cr\u00e9er un script :"
    },
    {
        "title": "La fonction fitMedia()",
        "id": "/fr/v2/getting-started.html#fitmedia",
        "text": "Maintenant que vous avez cr\u00e9\u00e9 votre premier script, commen\u00e7ons \u00e0 travailler sur votre musique !"
    },
    {
        "title": "D\u00e9boguer votre code",
        "id": "/fr/v2/getting-started.html#debugging",
        "text": "Il arrive que les programmeur.se.s commettent des erreurs qui ont pour effet de mal faire fonctionner le code, voire de ne pas le faire fonctionner du tout. En programmation, les fautes de codage sont appel\u00e9es erreurs ou bogues. Le processus de recherche et de correction des bogues s\u2019appelle le d\u00e9bogage. Vous pouvez utiliser des strat\u00e9gies de d\u00e9bogage \u00e0 l\u2019aide de la console."
    },
    {
        "title": "R\u00e9sum\u00e9 du chapitre 1",
        "id": "/fr/v2/getting-started.html#chapter1summary",
        "text": "Une ligne de code est une instruction \u00e0 ex\u00e9cuter par l\u2019ordinateur. L\u2019ensemble des instructions constitue le programme."
    },
    {
        "title": "Questions",
        "id": "/fr/v2/getting-started.html#chapter-questions",
        "text": "Parmi les \u00e9l\u00e9ments suivants, lequel n\u2019est PAS un panneau dans l\u2019espace de travail EarSketch ?"
    },
    {
        "title": "Personnaliser votre premi\u00e8re chanson",
        "id": "/fr/v2/your-first-song.html",
        "text": "Dans ce chapitre, vous apprendrez \u00e0 modifier le tempo de votre chanson, \u00e0 ajouter des commentaires \u00e0 votre code et \u00e0 charger vos propres sons pour appuyer le message de votre chanson."
    },
    {
        "title": "La fonction setTempo()",
        "id": "/fr/v2/your-first-song.html#settempo",
        "text": "Vous avez certainement remarqu\u00e9 que lorsque vous cr\u00e9ez un nouveau script, il y a des \u00e9l\u00e9ments pr\u00e9d\u00e9finis que vous devez absolument garder pour que votre code puisse s\u2019ex\u00e9cuter :"
    },
    {
        "title": "Ajouter des commentaires \u00e0 votre code",
        "id": "/fr/v2/your-first-song.html#comments",
        "text": "Les commentaires sont des lignes de code qui ne sont pas ex\u00e9cut\u00e9es par l\u2019ordinateur. Nous les utilisons uniquement pour rendre le code plus facile \u00e0 comprendre, pour mieux l\u2019organiser ou afin d\u2019inscrire des notes pour un usage ult\u00e9rieur. En Python, les commentaires sont indiqu\u00e9s par une ligne commen\u00e7ant par le symbole #."
    },
    {
        "title": "Charger vos propres sons",
        "id": "/fr/v2/your-first-song.html#uploadingsounds",
        "text": "Vous pouvez charger vos propres clips audio dans la biblioth\u00e8que de sons. Ouvrez votre navigateur de sons et cliquez sur le bouton \u00ab\u2009ajouter un son\u2009\u00bb sous les filtres (si le bouton ne s\u2019affiche pas, assurez-vous que vous \u00eates connect\u00e9). Une fen\u00eatre s\u2019ouvrira ensuite. Explorons les trois premi\u00e8res options :"
    },
    {
        "title": "Use Copyright Wisely",
        "id": "/fr/v2/your-first-song.html#copyright",
        "text": "Le droit d\u2019auteur ou Copyright est la partie de la loi qui couvre la propri\u00e9t\u00e9 intellectuelle ou la propri\u00e9t\u00e9 de l\u2019\u0153uvre cr\u00e9ative, comme la musique. Lorsque vous utilisez des \u00e9chantillons (petits extraits musicaux) ou remixez de la musique existante, vous devez absolument cr\u00e9diter les auteurs et vous pouvez le faire dans les commentaires de votre code. Avant d\u2019utiliser les sons cr\u00e9\u00e9s par d\u2019autres musiciens et de partager votre propre musique, apprenez-en davantage sur le droit d\u2019auteur !"
    },
    {
        "title": "R\u00e9sum\u00e9 du chapitre 2",
        "id": "/fr/v2/your-first-song.html#chapter2summary",
        "text": "Le tempo est la vitesse \u00e0 laquelle un morceau de musique est jou\u00e9, exprim\u00e9 en battements ou beats par minute (bpm). Le tempo est li\u00e9 au genre musical."
    },
    {
        "title": "Questions",
        "id": "/fr/v2/your-first-song.html#chapter-questions",
        "text": "Qu\u2019est-ce que la fonction setTempo() vous permet de faire dans EarSketch ?"
    },
    {
        "title": "Ajoutez quelques \u00ab\u2009beats\u2009\u00bb ou rythmes !",
        "id": "/fr/v2/add-beats.html",
        "text": "Dans ce chapitre, vous apprendrez \u00e0 cr\u00e9er vos propres beats ! Nous examinerons les variables, une nouvelle fonction appel\u00e9e makeBeat() ainsi que diff\u00e9rents exemples de beats pour diff\u00e9rents genres."
    },
    {
        "title": "Les variables",
        "id": "/fr/v2/add-beats.html#variables",
        "text": "Qu\u2019est-ce qu\u2019une variable ? Il s\u2019agit d\u2019un nom qui aidera l\u2019ordinateur \u00e0 trouver une information ou des donn\u00e9es. Cela fonctionne pour toutes sortes de donn\u00e9es. Par exemple, une variable peut pointer vers :"
    },
    {
        "title": "Cha\u00eenes de caract\u00e8res de beats",
        "id": "/fr/v2/add-beats.html#drumbeatstrings",
        "text": "Commen\u00e7ons par d\u00e9couvrir quelques notions de base sur le rythme :"
    },
    {
        "title": "La fonction makeBeat()",
        "id": "/fr/v2/add-beats.html#makebeat",
        "text": "Maintenant, voyons comment vous pouvez cr\u00e9er votre rythme ou \u00ab\u2009beat\u2009\u00bb. Ici, nous utiliserons le terme \u00ab\u2009beat\u2009\u00bb au lieu de rythme percussif : un motif r\u00e9p\u00e9t\u00e9 de sons percussifs. Nous utiliserons la fonction makeBeat() avec quatre arguments :"
    },
    {
        "title": "Cr\u00e9er un beat selon votre genre musical",
        "id": "/fr/v2/add-beats.html#beatsandgenres",
        "text": "Maintenant que vous avez commenc\u00e9 \u00e0 travailler avec la fonction makeBeat() et les cha\u00eenes de beats, explorons quelques motifs de beats de base que vous pouvez utiliser.\nVous avez appris qu\u2019un genre musical est un type de composition artistique (par exemple, la musique), caract\u00e9ris\u00e9e par des similitudes dans la forme, le style ou le th\u00e8me. Ainsi, certains genres ont des motifs de beat reconnaissables. Voici quelques exemples :"
    },
    {
        "title": "R\u00e9sum\u00e9 du chapitre 3",
        "id": "/fr/v2/add-beats.html#chapter3summary",
        "text": "Dans EarSketch, une mesure est divis\u00e9e en quatre temps ou quatre noires. Un temps est divis\u00e9 en quatre doubles croches."
    },
    {
        "title": "Questions",
        "id": "/fr/v2/add-beats.html#chapter-questions",
        "text": "Parmi les options suivantes, laquelle est une cha\u00eene de caract\u00e8res ?"
    },
    {
        "title": "Boucles et textures musicales",
        "id": "/fr/v2/loops-and-layers.html",
        "text": "Dans ce chapitre, vous en apprendrez davantage sur les boucles for et comment vous pouvez cr\u00e9er des r\u00e9p\u00e9titions dans votre code et votre musique. Nous aborderons \u00e9galement la notion de texture musicales, ainsi que quelques conseils de d\u00e9bogage."
    },
    {
        "title": "Boucles for",
        "id": "/fr/v2/loops-and-layers.html#forloops",
        "text": "Tout comme les musiciens peuvent jouer un motif de fa\u00e7on r\u00e9p\u00e9t\u00e9e, ou en boucle, les programmeurs peuvent \u00e9galement demander \u00e0 l\u2019ordinateur d\u2019effectuer des t\u00e2ches \u00e0 r\u00e9p\u00e9tition dans une boucle\u202f! C\u2019est plus efficace, car au lieu d\u2019\u00e9crire une instruction \u00e0 plusieurs reprises, vous pouvez \u00e9crire une boucle comprenant les instructions et l\u2019ordinateur comprendra qu\u2019il devra les r\u00e9p\u00e9ter."
    },
    {
        "title": "Flux de commande",
        "id": "/fr/v2/loops-and-layers.html#controlflow",
        "text": "Voici un autre exemple de la fa\u00e7on dont vous pouvez utiliser les boucles for :"
    },
    {
        "title": "Astuces de d\u00e9bogage",
        "id": "/fr/v2/loops-and-layers.html#debuggingtips",
        "text": "La programmation ne se limite pas \u00e0 l\u2019\u00e9criture de code. Il y a aussi une partie de d\u00e9bogage et de maintenance du code. Le terme \u00ab\u2009d\u00e9boguer\u2009\u00bb signifie r\u00e9soudre les erreurs. Si vous rencontrez une erreur, essayez de suivre les \u00e9tapes suivantes :"
    },
    {
        "title": "Astuces musicales",
        "id": "/fr/v2/loops-and-layers.html#musicaltips",
        "text": "Maintenant que vous disposez de plusieurs outils pour cr\u00e9er votre musique, comme les fonctions fitMedia(), makeBeat() et les boucles for, nous allons examiner des id\u00e9es musicales."
    },
    {
        "title": "R\u00e9sum\u00e9 du chapitre 4",
        "id": "/fr/v2/loops-and-layers.html#chapter4summary",
        "text": "Une boucle for indique \u00e0 l\u2019ordinateur d\u2019ex\u00e9cuter une section de code de fa\u00e7on r\u00e9p\u00e9t\u00e9e, cr\u00e9ant ainsi un code plus efficace. Les boucles for se composent d\u2019un corps de boucle, d\u2019un compteur de boucle et d\u2019une plage sp\u00e9cifique. En outre, le code dans le corps de la boucle doit \u00eatre indent\u00e9."
    },
    {
        "title": "Questions",
        "id": "/fr/v2/loops-and-layers.html#chapter-questions",
        "text": "Parmi les \u00e9l\u00e9ments suivants, lequel n\u2019est PAS un composant d\u2019une boucle for\u202f?"
    },
    {
        "title": "Effets et enveloppes",
        "id": "/fr/v2/effects-and-envelopes.html",
        "text": "EarSketch permet au compositeur de modifier des clips audio pour produire des sons nouveaux et uniques. Ceci est r\u00e9alis\u00e9 gr\u00e2ce \u00e0 la fonction setEffect(), soit l\u2019objet de ce chapitre."
    },
    {
        "title": "Utiliser les effets dans EarSketch",
        "id": "/fr/v2/effects-and-envelopes.html#effectsinearsketch",
        "text": "Les effets nous permettent de modifier la qualit\u00e9 des sons. Tout comme ajouter un filtre permet de modifier une photo, ajouter un effet permet de modifier un son. Par exemple, vous pouvez modifier le volume, ajouter un \u00e9cho ou une r\u00e9verb\u00e9ration, etc."
    },
    {
        "title": "Fonctions et autres effets",
        "id": "/fr/v2/effects-and-envelopes.html#functionsandmoreeffects",
        "text": "Jusqu\u2019\u00e0 pr\u00e9sent, vous avez utilis\u00e9 plusieurs fonctions dans EarSketch comme fitMedia() ou setEffect(). Notez que les noms des fonctions commencent toujours par une lettre minuscule et sont souvent un verbe. Les parenth\u00e8ses indiquent \u00e0 l\u2019ordinateur d\u2019appeler ou d'ex\u00e9cuter la fonction. Les arguments, ou param\u00e8tres, entre les parenth\u00e8ses sont s\u00e9par\u00e9s par des virgules."
    },
    {
        "title": "Effets et enveloppes",
        "id": "/fr/v2/effects-and-envelopes.html#effectsandenvelopes",
        "text": "Vous avez maintenant commenc\u00e9 \u00e0 utiliser des effets et peut-\u00eatre que vous souhaiterez modifier un effet au fil du temps ; par exemple, vous voudrez peut-\u00eatre ajouter un fondu d\u2019ouverture (lorsque le volume devient plus \u00e9lev\u00e9) au d\u00e9but de votre chanson."
    },
    {
        "title": "R\u00e9sum\u00e9 du chapitre 5",
        "id": "/fr/v2/effects-and-envelopes.html#chapter5summary",
        "text": "Les effets permettent de modifier la qualit\u00e9 d\u2019un son pour le rendre plus unique."
    },
    {
        "title": "Questions",
        "id": "/fr/v2/effects-and-envelopes.html#chapter-questions",
        "text": "Qu\u2019est-ce qu\u2019un effet vous permet de faire dans EarSketch ?"
    },
    {
        "title": "Mixer \u00e0 l\u2019aide d\u2019instructions conditionnelles",
        "id": "/fr/v2/mixing-with-conditionals.html",
        "text": "Il est possible d\u2019automatiser beaucoup d\u2019op\u00e9rations gr\u00e2ce au codage. Un exemple d\u2019automatisation consisterait \u00e0 programmer un robot pour qu\u2019il s\u2019arr\u00eate \u00e0 la d\u00e9tection d\u2019un obstacle : le robot n\u2019aura donc pas besoin d\u2019un \u00eatre humain pour le faire arr\u00eater manuellement. Au lieu de cela, le robot aura un capteur pour d\u00e9tecter les obstacles, et s\u2019il y en rencontre, il s\u2019arr\u00eatera. Il est possible de faire des automatisations musicales dans EarSketch, en utilisant des instructions conditionnelles (\u00ab\u2009if\u2009\u00bb). Nous allons maintenant voir comment automatiser le mixage des pistes. Le mixage signifie que si une piste est trop forte, nous r\u00e9duirons son volume et si elle est trop faible, nous augmenterons son volume."
    },
    {
        "title": "Utilisation de la fonction analyzeTrack()",
        "id": "/fr/v2/mixing-with-conditionals.html#analyzetrack",
        "text": "Nous allons maintenant voir comment d\u00e9tecter l\u2019intensit\u00e9 sonore ou le volume d\u2019une piste. Assurez-vous de bien comprendre la diff\u00e9rence entre la hauteur (aigu\u00eb ou grave) et le volume (fort ou faible) d\u2019un son. Nous utiliserons une fonction EarSketch nomm\u00e9e analyzeTrack(). Copiez et ex\u00e9cutez le code suivant :"
    },
    {
        "title": "Bool\u00e9ens et comparaisons",
        "id": "/fr/v2/mixing-with-conditionals.html#booleansandcomparisons",
        "text": "Nous allons maintenant voir comment fonctionne la logique bool\u00e9enne. Cela nous aidera \u00e0 automatiser certaines t\u00e2ches."
    },
    {
        "title": "Instructions conditionnelles",
        "id": "/fr/v2/mixing-with-conditionals.html#conditionalstatements",
        "text": "Qu\u2019est-ce qu\u2019une instruction conditionnelle ? Une instruction correspond \u00e0 une commande pour l\u2019ordinateur. Une instruction conditionnelle est une instruction qui ne doit \u00eatre ex\u00e9cut\u00e9e que si une certaine condition est remplie (vraie). Par exemple, si vous programmez un robot pour qu\u2019il s\u2019arr\u00eate devant un obstacle, la condition sera \"Y a-t-il un obstacle\u202f?\". Si oui, il doit s\u2019arr\u00eater. Si non, ne faites rien (continuez)."
    },
    {
        "title": "Mixer vos pistes",
        "id": "/fr/v2/mixing-with-conditionals.html#mixingyourtracks",
        "text": "Utilisons maintenant tous ces outils pour mixer votre chanson. Le mixage modifie le volume des pistes pour qu\u2019elles soient bien \u00e9quilibr\u00e9es."
    },
    {
        "title": "R\u00e9sum\u00e9 du chapitre 6",
        "id": "/fr/v2/mixing-with-conditionals.html#chapter6summary",
        "text": "La fonction analyzeTrack() n\u00e9cessite deux arguments :\nle num\u00e9ro de piste et un param\u00e8tre. Lorsque le param\u00e8tre est RMS_AMPLITUDE, la fonction renvoie le volume de la piste (un nombre compris entre 0 et 1). Lorsque le param\u00e8tre est SPECTRAL_CENTROID, la fonction renvoie la brillance de la piste."
    },
    {
        "title": "Questions",
        "id": "/fr/v2/mixing-with-conditionals.html#chapter-questions",
        "text": "Parmi les \u00e9l\u00e9ments suivants, lesquels sont des bool\u00e9ens ?"
    },
    {
        "title": "Custom Functions, Song Structure",
        "id": "/fr/v2/custom-functions.html",
        "text": "The song structure is the song\u2019s organization over time: how to create meaningful sections and transitions for the flow of your music. In this chapter, you\u2019ll create your own functions: custom functions, to structure your songs!"
    },
    {
        "title": "La structure d\u2019une chanson",
        "id": "/fr/v2/custom-functions.html#asongsstructure",
        "text": "Une chanson peut \u00eatre divis\u00e9e en parties ou \u00ab\u2009sections\u2009\u00bb. Une section est compos\u00e9e de plusieurs mesures (unit\u00e9s de temps musicales), elle exprime une id\u00e9e ou un sentiment. Habituellement, les musiciens essaient d\u2019ajouter un certain contraste entre les diff\u00e9rentes sections. Les intros, les couplets, les refrains et les outros sont des exemples de sections de morceaux."
    },
    {
        "title": "Create your custom functions",
        "id": "/fr/v2/custom-functions.html#creatingyourcustomfunctions",
        "text": "Dans l\u2019exemple pr\u00e9c\u00e9dent avec la chanson de forme ABA, le code est long et se r\u00e9p\u00e8te pour la deuxi\u00e8me partie A. Cependant, il y a un moyen d\u2019\u00eatre plus efficace, gr\u00e2ce aux fonctions personnalis\u00e9es\u202f! Nous allons d\u00e9finir une fonction qui repr\u00e9sentera la partie A, puis nous l\u2019appelerons \u00e0 deux reprises."
    },
    {
        "title": "Strat\u00e9gies de transition",
        "id": "/fr/v2/custom-functions.html#transitionstrategies",
        "text": "Maintenant que vous savez comment cr\u00e9er des fonctions personnalis\u00e9es pour structurer votre chanson, nous allons examiner la notion de transitions. Les transitions aident \u00e0 passer en douceur d\u2019une partie \u00e0 l\u2019autre. Celles-ci permettent de relier les versets et le refrain, de faire une mont\u00e9e jusqu\u2019\u00e0 un drop, de mixer des pistes (DJing) ou de faire un changement de tonalit\u00e9. Le but d\u2019une transition est d\u2019attirer l\u2019attention de l\u2019auditeur et de leur faire savoir qu\u2019un changement est sur le point de se produire."
    },
    {
        "title": "Votre chanson compl\u00e8te",
        "id": "/fr/v2/custom-functions.html#yourfullsong",
        "text": "En programmation, nous pouvons cr\u00e9er des abstractions, soit le fait de regrouper des id\u00e9es pour former un concept unique. De m\u00eame, en musique, nous regroupons les id\u00e9es musicales en sections. Les fonctions sont un type d\u2019abstraction utilis\u00e9 en informatique. Elles int\u00e8grent plusieurs instructions dans un seul outil pour \u00eatre facilement appel\u00e9es. Les abstractions peuvent ainsi rendre la forme d\u2019un programme plus claire."
    },
    {
        "title": "R\u00e9sum\u00e9 du chapitre 7",
        "id": "/fr/v2/custom-functions.html#chapter7summary",
        "text": "Les sections sont des parties musicales compos\u00e9es de plusieurs mesures. Chacune exprime une id\u00e9e ou un sentiment."
    },
    {
        "title": "Questions",
        "id": "/fr/v2/custom-functions.html#chapter-questions",
        "text": "Parmi les propositions suivantes, laquelle N\u2019EST PAS un exemple de section musicale ?"
    },
    {
        "title": "Obtenir une entr\u00e9e d\u2019utilisateur.rice",
        "id": "/fr/v2/get-user-input.html",
        "text": "Dans ce chapitre, vous apprendrez \u00e0 demander \u00e0 l\u2019utilisateur.rice de saisir des informations et \u00e0 adapter votre musique en cons\u00e9quence. Pour ce faire, nous allons examiner les instructions de retour et la fonction readInput()."
    },
    {
        "title": "Instruction de retour",
        "id": "/fr/v2/get-user-input.html#returnstatement",
        "text": "Tout d\u2019abord, visionnez la vid\u00e9o suivante :"
    },
    {
        "title": "Obtenir une entr\u00e9e de l\u2019utilisateur.rice",
        "id": "/fr/v2/get-user-input.html#userinput",
        "text": "Ici, nous allons voir comment demander la saisie d\u2019informations \u00e0 l\u2019utilisateur.rice lorsque le bouton \u00ab\u2009ex\u00e9cuter\u2009\u00bb est enfonc\u00e9. Ceci est possible gr\u00e2ce \u00e0 la fonction readInput(). Cette fonction n\u00e9cessite comme param\u00e8tre une cha\u00eene de caract\u00e8re (par exemple : \"quel tempo d\u00e9sirez-vous appliquer pour votre musique\u202f?\"). Lorsque l\u2019utilisateur.rice ex\u00e9cutera le code, il.elle verra une nouvelle fen\u00eatre s\u2019afficher comprenant cette cha\u00eene de caract\u00e8res et sera invit\u00e9.e \u00e0 saisir une r\u00e9ponse. La fonction readInput() renverra ensuite ce que l\u2019utilisateur.rice aura saisi."
    },
    {
        "title": "Logique bool\u00e9enne",
        "id": "/fr/v2/get-user-input.html#booleanlogic",
        "text": "Nous allons maintenant combiner la logique bool\u00e9enne et les entr\u00e9es d\u2019utilisateur pour examiner autre exemple d\u2019interaction utilisateur."
    },
    {
        "title": "R\u00e9sum\u00e9 du chapitre 8",
        "id": "/fr/v2/get-user-input.html#chapter8summary",
        "text": "Les instructions de retour peuvent \u00eatre incluses dans une d\u00e9finition de fonction pour renvoyer un r\u00e9sultat lorsque la fonction est appel\u00e9e."
    },
    {
        "title": "Questions",
        "id": "/fr/v2/get-user-input.html#chapter-questions",
        "text": "Parmi les \u00e9l\u00e9ments suivants, lequel serait consid\u00e9r\u00e9 comme un exemple de conversion de type de donn\u00e9es ?"
    },
    {
        "title": "Comment organiser votre code avec les structures de donn\u00e9es",
        "id": "/fr/v2/data-structures.html",
        "text": "Vous avez maintenant de nombreux outils \u00e0 votre disposition pour cr\u00e9er des morceaux dans EarSketch. Il est possible que vos scripts soient tr\u00e8s vari\u00e9s et longs. Ce chapitre vous aidera \u00e0 organiser votre code, en particulier \u00e0 l\u2019aide d\u2019une abstraction appel\u00e9e \u00ab\u2009liste\u2009\u00bb et d\u2019une nouvelle fonctionnalit\u00e9 de makeBeat()."
    },
    {
        "title": "Les structures de donn\u00e9es",
        "id": "/fr/v2/data-structures.html#datastructures",
        "text": "Si vous avez de tr\u00e8s longues listes de variables de sons, il est possible de les organiser efficacement gr\u00e2ce \u00e0 des listes. Une *liste<strong>, \u00e9galement appel\u00e9e tableau dans certains langages de programmation, est une collection de valeurs ou d'*\u00e9l\u00e9ments</strong> entre crochets ([]) et s\u00e9par\u00e9s par des virgules. En voici un exemple :"
    },
    {
        "title": "Utiliser des structures de donn\u00e9es avec la fonction makeBeat()",
        "id": "/fr/v2/data-structures.html#usingdatastructureswithmakebeat",
        "text": "Nous allons voir deux fa\u00e7ons d\u2019utiliser les structures de donn\u00e9es avec la fonction makeBeat(). Tout d\u2019abord, voyons \u00e0 quel point les cha\u00eenes de caract\u00e8res et les listes sont similaires :"
    },
    {
        "title": "\u00c9valuer la qualit\u00e9 et la justesse du code",
        "id": "/fr/v2/data-structures.html#evaluatingcorrectness",
        "text": "F\u00e9licitations ! Vous avez maintenant acquis des comp\u00e9tences musicales et de codage qui vous permettent d\u2019\u00eatre cr\u00e9atif.ve avec EarSketch ! Il y a un dernier point que nous aimerions aborder avec vous : veiller \u00e0 ce que votre code soit aussi fluide et ordonn\u00e9 que possible. Voici quelques \u00e9l\u00e9ments que vous pouvez v\u00e9rifier :"
    },
    {
        "title": "Conclusion",
        "id": "/fr/v2/data-structures.html#conclusion",
        "text": "Nous sommes ravis que vous ayez pu participer \u00e0 l\u2019aventure EarSketch ! Nous esp\u00e9rons que vous avez appr\u00e9ci\u00e9 votre exp\u00e9rience et que vous avez appris beaucoup de choses avec cet outil :) Il y a bien plus \u00e0 d\u00e9couvrir dans les chapitres facultatifs !"
    },
    {
        "title": "R\u00e9sum\u00e9 du chapitre 9",
        "id": "/fr/v2/data-structures.html#chapter9summary",
        "text": "Une liste ou \u00ab\u2009list\u2009\u00bb est un ensemble de valeurs combin\u00e9es en une seule entit\u00e9, un moyen efficace de stocker des donn\u00e9es. Aussi, il est possible de stocker n\u2019importe quel type de donn\u00e9es dans une liste."
    },
    {
        "title": "Questions",
        "id": "/fr/v2/data-structures.html#chapter-questions",
        "text": "Parmi les op\u00e9rations suivantes, laquelle est utilis\u00e9e pour combiner des listes ou des tableaux ?"
    },
    {
        "title": "Tous les effets expliqu\u00e9s en d\u00e9tail",
        "id": "/fr/v1/every-effect-explained-in-detail.html",
        "text": "BANDPASS est un filtre qui ne fait passer qu\u2019une bande de fr\u00e9quences de taille r\u00e9glable. Toutes les autres fr\u00e9quences sont supprim\u00e9es. En limitant consid\u00e9rablement la gamme de fr\u00e9quences du son original (lorsque BANDPASS_WIDTH est d\u00e9fini \u00e0 une valeur relativement faible), le filtre peut produire des sons \u00e0 effet sp\u00e9cial, comme le son de \u00ab m\u00e9gaphone \u00bb qui est populaire dans certaines musiques rock modernes, ou le son du t\u00e9l\u00e9phone ou d\u2019un petit haut-parleur. En utilisant une gamme de fr\u00e9quences plus large (donc en r\u00e9glant BANDPASS_WIDTH sur une valeur plus \u00e9lev\u00e9e), les sons qui semblent \u00ab\u2009trop gros\u2009\u00bb pour un mixage peuvent \u00eatre att\u00e9nu\u00e9s afin de mieux s\u2019int\u00e9grer aux autres sons du mixage."
    },
    {
        "title": "BANDPASS",
        "id": "/fr/v1/every-effect-explained-in-detail.html#bandpass",
        "text": "BANDPASS est un filtre qui ne fait passer qu\u2019une bande de fr\u00e9quences de taille r\u00e9glable. Toutes les autres fr\u00e9quences sont supprim\u00e9es. En limitant consid\u00e9rablement la gamme de fr\u00e9quences du son original (lorsque BANDPASS_WIDTH est d\u00e9fini \u00e0 une valeur relativement faible), le filtre peut produire des sons \u00e0 effet sp\u00e9cial, comme le son de \u00ab m\u00e9gaphone \u00bb qui est populaire dans certaines musiques rock modernes, ou le son du t\u00e9l\u00e9phone ou d\u2019un petit haut-parleur. En utilisant une gamme de fr\u00e9quences plus large (donc en r\u00e9glant BANDPASS_WIDTH sur une valeur plus \u00e9lev\u00e9e), les sons qui semblent \u00ab\u2009trop gros\u2009\u00bb pour un mixage peuvent \u00eatre att\u00e9nu\u00e9s afin de mieux s\u2019int\u00e9grer aux autres sons du mixage."
    },
    {
        "title": "CHORUS",
        "id": "/fr/v1/every-effect-explained-in-detail.html#chorus",
        "text": "CHORUS cr\u00e9e diverses copies du son original qui sont l\u00e9g\u00e8rement modifi\u00e9es sur le plan de la hauteur et du temps et mix\u00e9es \u00e0 nouveau dans le son, cr\u00e9ant ainsi un effet d\u2019ensemble de plusieurs voix jouant ensemble. \u00c0 des valeurs extr\u00eames de r\u00e9glage des param\u00e8tres, on peut entendre des sons artificiels ressemblant \u00e0 ceux d\u2019un robot."
    },
    {
        "title": "COMPRESSOR",
        "id": "/fr/v1/every-effect-explained-in-detail.html#compressor",
        "text": "COMPRESSOR est un compresseur de deux param\u00e8tres de base, qui r\u00e9duit le volume des sons les plus forts de la piste avec effet, tout en amplifiant le volume de ses sons les plus faibles. Cela cr\u00e9e une plage dynamique plus \u00e9troite \u00e0 partir du son d\u2019origine et est souvent utilis\u00e9 pour maximiser la force du son original, tout en r\u00e9duisant le bruit \u00e0 ajouter plus tard."
    },
    {
        "title": "DELAY",
        "id": "/fr/v1/every-effect-explained-in-detail.html#delay",
        "text": "DELAY cr\u00e9e un d\u00e9lai ressemblant \u00e0 un \u00e9cho r\u00e9p\u00e9t\u00e9 du son d\u2019origine. Un effet de d\u00e9lai permet de lire l\u2019audio d\u2019origine ainsi qu\u2019une version avec d\u00e9lai plus silencieuse de l\u2019original qui sonne comme un \u00e9cho. Apr\u00e8s le premier \u00e9cho, il joue un \u00e9cho de l\u2019\u00e9cho (encore plus silencieux), puis un \u00e9cho de l\u2019\u00e9cho de l\u2019\u00e9cho (encore plus silencieux) et ainsi de suite jusqu\u2019\u00e0 ce que l\u2019\u00e9cho disparaisse. Avec l\u2019effet de d\u00e9lai, nous pouvons contr\u00f4ler combien de temps passe entre chaque \u00e9cho (d\u00e9lai). Si nous r\u00e9glons le d\u00e9lai de mani\u00e8re \u00e0 ce qu\u2019il corresponde \u00e0 la dur\u00e9e d\u2019un beat, nous pouvons cr\u00e9er des effets rythmiques avec d\u00e9lai."
    },
    {
        "title": "DISTORTION",
        "id": "/fr/v1/every-effect-explained-in-detail.html#distortion",
        "text": "DISTORTION cr\u00e9e un son \u00ab sale \u00bb ou \u00ab satur\u00e9 \u00bb en surchargeant le son original. Cela comprime ou \u00e9cr\u00eate l\u2019onde sonore, ajoutant des harmoniques (des fr\u00e9quences plus \u00e9lev\u00e9es li\u00e9es au son d\u2019origine). Il est courant de d\u00e9former le son d\u2019une guitare \u00e9lectrique en \u00ab\u2009surchargeant\u2009\u00bb l\u2019amplificateur de la guitare. La musique moderne utilise parfois la distorsion pour ajouter un effet ou une sensation grunge ou granuleuse \u00e0 la composition."
    },
    {
        "title": "EQ3BAND",
        "id": "/fr/v1/every-effect-explained-in-detail.html#eq3band",
        "text": "EQ3BAND est un \u00e9galiseur \u00e0 trois bandes utilis\u00e9 pour des t\u00e2ches d\u2019\u00e9galisation simples. Un \u00e9galiseur est utilis\u00e9 pour r\u00e9gler le volume des gammes de fr\u00e9quences s\u00e9par\u00e9es dans une piste audio. Cet effet particulier peut \u00eatre utilis\u00e9 pour r\u00e9gler le volume de trois gammes (\u00ab\u2009bandes\u2009\u00bb) de fr\u00e9quence, \u00e0 savoir les graves, les m\u00e9diums et les aigus (bas, moyen, haut), o\u00f9 la limite sup\u00e9rieure (EQ3BAND_LOWFREQ) de la gamme des graves et la fr\u00e9quence centrale de la gamme des m\u00e9diums (EQ3BAND_MIDFREQ) peuvent \u00eatre r\u00e9gl\u00e9es par l\u2019utilisateur."
    },
    {
        "title": "FILTER",
        "id": "/fr/v1/every-effect-explained-in-detail.html#filter",
        "text": "FILTER est un filtre passe-bas type avec r\u00e9sonance. Un effet filtre passe-bas permet \u00e0 l\u2019audio de basse fr\u00e9quence de passer inchang\u00e9, tout en abaissant le volume des fr\u00e9quences sup\u00e9rieures \u00e0 une fr\u00e9quence de coupure (le param\u00e8tre FILTER_FREQ). Cela donne \u00e0 l\u2019audio un son plus \u00ab sombre \u00bb."
    },
    {
        "title": "FLANGER",
        "id": "/fr/v1/every-effect-explained-in-detail.html#flanger",
        "text": "FLANGER est similaire \u00e0 un effet Chorus, qui consiste \u00e0 cr\u00e9er plusieurs copies du son original, \u00e0 les faire varier l\u00e9g\u00e8rement en hauteur et en temps, puis \u00e0 les remixer dans le son. Par contre, un effet \u00ab\u2009Flanger\u2009\u00bb utilise une plage de valeurs de temps beaucoup plus r\u00e9duite, ce qui cr\u00e9e un son \u00e9volutif de type \u00ab\u2009whoosh\u2009\u00bb. \u00c0 des valeurs extr\u00eames de r\u00e9glage des param\u00e8tres, on peut entendre des sons plus artificiels ressemblant \u00e0 ceux d\u2019un robot."
    },
    {
        "title": "PAN",
        "id": "/fr/v1/every-effect-explained-in-detail.html#pan",
        "text": "PAN affecte le mixage audio entre les canaux gauche et droit. Par exemple, si vous portez des \u00e9couteurs, le fait de modifier le panoramique d\u00e9terminera si vous entendez quelque chose dans l\u2019oreille gauche ou dans l\u2019oreille droite."
    },
    {
        "title": "PHASER",
        "id": "/fr/v1/every-effect-explained-in-detail.html#phaser",
        "text": "PHASER est un effet de balayage qui cr\u00e9e une copie du son original sur une gamme de fr\u00e9quences sp\u00e9cifi\u00e9e. Cette copie produite subit ensuite un tr\u00e8s l\u00e9ger d\u00e9lai et est jou\u00e9e contre le son original tout en modifiant l\u00e9g\u00e8rement son temps de d\u00e9lai dans un sens ou dans l\u2019autre. Ainsi, certaines des fr\u00e9quences copi\u00e9es s\u2019annulent temporairement en \u00e9tant \u00ab\u2009en phase et hors phase\u2009\u00bb les unes avec les autres, cr\u00e9ant ainsi un effet de balayage."
    },
    {
        "title": "PITCHSHIFT",
        "id": "/fr/v1/every-effect-explained-in-detail.html#pitchshift",
        "text": "PITCHSHIFT permet simplement de diminuer ou d\u2019augmenter le son d\u2019un intervalle de hauteur sp\u00e9cifique (PITCHSHIFT_SHIFT). Cela peut \u00eatre utile pour que plusieurs fichiers sonores sonnent mieux ensemble ou, au contraire, pour ajouter un peu de dissonance, si vous le souhaitez."
    },
    {
        "title": "REVERB",
        "id": "/fr/v1/every-effect-explained-in-detail.html#reverb",
        "text": "REVERB ajoute une ambiance \u00e0 d\u00e9croissance lente au signal source, similaire \u00e0 l\u2019effet DELAY mais souvent beaucoup plus dense et riche. Il est largement utilis\u00e9 pour le mixage audio et la spatialisation."
    },
    {
        "title": "RINGMOD",
        "id": "/fr/v1/every-effect-explained-in-detail.html#ringmod",
        "text": "RINGMOD multiplie les signaux provenant de deux sons en m\u00eame temps : votre son original et une onde sinuso\u00efdale pure (qui ressemble \u00e0 un diapason). L\u2019effet de cette multiplication produit un son diff\u00e9rent \u00e0 chaque fr\u00e9quence du son original, ce qui cr\u00e9e un r\u00e9sultat compl\u00e8tement artificiel, car ce type de son ne pourrait jamais se produire naturellement. Certains r\u00e9glages de param\u00e8tres pour cet effet produiront probablement des effets sonores reconnaissables, semblables \u00e0 ceux utilis\u00e9s dans les vieux films de science-fiction. Il peut \u00eatre ainsi utile d\u2019exp\u00e9rimenter avec cet effet, car il existe un large \u00e9ventail de sons qui peuvent \u00eatre g\u00e9n\u00e9r\u00e9s \u00e0 partir de votre son original."
    },
    {
        "title": "TREMOLO",
        "id": "/fr/v1/every-effect-explained-in-detail.html#tremolo",
        "text": "TREMOLO modifie rapidement le volume du son original alternativement de sa valeur initiale au silence, ce qui entra\u00eene un effet de sonorit\u00e9 vacillante."
    },
    {
        "title": "VOLUME",
        "id": "/fr/v1/every-effect-explained-in-detail.html#volume",
        "text": "VOLUME vous permet de modifier le volume d\u2019un clip audio."
    },
    {
        "title": "WAH",
        "id": "/fr/v1/every-effect-explained-in-detail.html#wah",
        "text": "WAH est un filtre passe-bande r\u00e9sonant (voir l\u2019effet BANDPASS) qui cr\u00e9e un son de p\u00e9dale de type \u00ab wah-wah \u00bb lorsque modifi\u00e9 au fil du temps \u00e0 l\u2019aide d\u2019enveloppes dans la fonction setEffect()."
    },
    {
        "title": "Tous les effets expliqu\u00e9s en d\u00e9tail",
        "id": "/fr/v1/every-error-explained-in-detail.html",
        "text": "Message de la console : ImportError : Impossible de trouver ou d\u2019importer les modules appropri\u00e9s."
    },
    {
        "title": "Import Error",
        "id": "/fr/v1/every-error-explained-in-detail.html#importerror",
        "text": "Message de la console : ImportError : Impossible de trouver ou d\u2019importer les modules appropri\u00e9s."
    },
    {
        "title": "Indentation Error",
        "id": "/fr/v1/every-error-explained-in-detail.html#indentationerror",
        "text": "Message de la console : IndentationError : Une erreur d\u2019indentation s\u2019est produite dans le code (manque d\u2019espaces ou espaces en trop)."
    },
    {
        "title": "Index Error",
        "id": "/fr/v1/every-error-explained-in-detail.html#indexerror",
        "text": "Message de la console : IndexError : Une erreur s\u2019est produite lors de l\u2019utilisation d\u2019un index hors de plage."
    },
    {
        "title": "Name Error",
        "id": "/fr/v1/every-error-explained-in-detail.html#nameerror",
        "text": "Message de la console : NameError : Une erreur relative \u00e0 un nom de variable ou de fonction non d\u00e9fini s\u2019est produite."
    },
    {
        "title": "Parse Error",
        "id": "/fr/v1/every-error-explained-in-detail.html#parseerror",
        "text": "Message de la console : ParseError : Une erreur s\u2019est produite lors de la lecture du code."
    },
    {
        "title": "Syntax Error",
        "id": "/fr/v1/every-error-explained-in-detail.html#syntaxerror",
        "text": "Message de la console : SyntaxError : Une erreur relative \u00e0 la syntaxe (la disposition) du code s\u2019est produite."
    },
    {
        "title": "Type Error",
        "id": "/fr/v1/every-error-explained-in-detail.html#typeerror",
        "text": "Message de la console : TypeError : Une erreur relative au type de donn\u00e9es attendu s\u2019est produite."
    },
    {
        "title": "Value Error",
        "id": "/fr/v1/every-error-explained-in-detail.html#valueerror",
        "text": "Message de la console : ValueError : Un argument fourni ne se trouve pas dans l\u2019ensemble ou la plage de valeurs acceptables pour une fonction."
    },
    {
        "title": "L\u2019API de EarSketch",
        "id": "/fr/v1/the-earSketch-api.html",
        "text": "Cliquez ici pour ouvrir l\u2019API de EarSketch."
    },
    {
        "title": "Programming Reference",
        "id": "/en/v1/programming-reference.html",
        "text": "Online JavaScript Interpreter"
    },
    {
        "title": "EarSketch Sound Library",
        "id": "/en/v1/earsketch-sound-library.html",
        "text": "To find sounds that work well together in your music, choose them from the same folder. For example, pick all your sounds from DUBSTEP_140_BPM or all of them from Y30_68_BPM_B_MINOR."
    },
    {
        "title": "Creating Beats with makeBeat",
        "id": "/en/v1/creating-beats.html",
        "text": "The 16 elements of a beat string make up the 16 sixteenth notes found in one measure of 4/4 time. In creating beats with makeBeat() the style, instrument, and role of the beat should be taken into consideration in creating the rhythm pattern. This guide will provide sample rhythm patterns in the style of 4/4 Time, Hip Hop, Funk, Dubstep, and African Drum Ensemble based patterns. This will not represent a complete list of patterns, rather it will act as a guide in identifying the characteristics of percussion beats and provide string example for makeBeat()."
    },
    {
        "title": "The three elements of a percussion line",
        "id": "/en/v1/creating-beats.html#thethreeelementsofapercussionline",
        "text": "The drum set or percussion line can be divided into three elements:"
    },
    {
        "title": "Some Funk and Hip Hop Beats",
        "id": "/en/v1/creating-beats.html#somefunkandhiphopbeats",
        "text": "Hip Hop and Funk both function well at tempos between 84 and 92 beats per minute. If you use a running beat of 8ths, the style will gravitate closer to Hip Hop. A running beat of 16ths will simulate a funk style."
    },
    {
        "title": "Dubstep Style Beats:",
        "id": "/en/v1/creating-beats.html#dubstepstylebeats",
        "text": "Dubstep music usually is played faster than 136 beats per minute with a \u2018halftime\u2019 feel using triplet style rhythms in the Bass Drum and Back Beat. Beats here will simulate the triplet style with a 3-sixteenth, 3-sixteenth, 2-sixteenth pattern. Dubstep music also has longer patterns, usually extending across 4 measures, so the different beats are meant to be played in succession. Dubstep music also \u2018breaks\u2019 the Bass on 1 and 3 and the Back Beat on 2 and 4 rules."
    },
    {
        "title": "African Style Drumming Patterns",
        "id": "/en/v1/creating-beats.html#africanstyledrummingpatterns",
        "text": "These patterns seek to emulate the style of drumming ensembles and multi-layered percussion music based on African music. The patterns here are adapted from the \u201cUnifix Patterns\u201d as presented on the Phil Tulga website. The drum patterns are designed to \u201cweave\u201d in and out and each pattern complements the other. These patterns also demonstrate the use of lists."
    },
    {
        "title": "Randomness",
        "id": "/en/v1/randomness.html",
        "text": "Introducing randomness in music creates a sense of novelty, leading to a more improvisational feel. In this chapter, we turn some control over to the computer, allowing it to introduce elements of randomness into our music."
    },
    {
        "title": "Random numbers",
        "id": "/en/v1/randomness.html#randomnumbers",
        "text": "A random number is a generated value that is impossible to predict. A random integer can be generated in Python with the randint() function. randint() is part of Python\u2019s random API, so we need to import it as part of our script setup. Just like we import the EarSketch API with from earsketch import *, the random API is imported with from random import *."
    },
    {
        "title": "Remixing a Rhythm",
        "id": "/en/v1/randomness.html#remixingarhythm",
        "text": "Let\u2019s remix a popular rhythm, the amen break, by introducing a random drum pattern. The amen break is widely sampled in electronic music. The code for this particular rhythm is shown below. Two separate makeBeat() calls are used, one to handle the kick and snare, and the other for a series of cymbals. The beat strings used in these function calls are the result of concatenating a set of smaller substrings. This allows us to better understand the structure of the rhythm."
    },
    {
        "title": "Chapter 20 Summary",
        "id": "/en/v1/randomness.html#chapter20summary",
        "text": "Random numbers generated within a program are impossible to predict."
    },
    {
        "title": "Questions",
        "id": "/en/v1/randomness.html#chapter-questions",
        "text": "What set of numbers will randint(1,5) choose a random number from?"
    },
    {
        "title": "Sonification",
        "id": "/en/v1/sonification.html",
        "text": "If you could hear this image of the Orion Nebula, what would it sound like?"
    },
    {
        "title": "Images as Data",
        "id": "/en/v1/sonification.html#imagesasdata",
        "text": "If you could hear this image of the Orion Nebula, what would it sound like?"
    },
    {
        "title": "Multidimensional Lists and Arrays",
        "id": "/en/v1/sonification.html#multidimensionalData",
        "text": "We now know that any image is made up of a large number of pixels, each of which has number values that represent colors and brightness. Consider this row of four (zoomed in) pixels:"
    },
    {
        "title": "importImage",
        "id": "/en/v1/sonification.html#importimage",
        "text": "After you\u2019ve made a guess about the data, here\u2019s a way for you to check it. If you want to work with images in EarSketch, you can use our importImage function that converts any image into data that can be used within EarSketch. importImage takes 3 required arguments (and one optional argument for color data). These are the 3 basic arguments:"
    },
    {
        "title": "Nested Loops",
        "id": "/en/v1/sonification.html#nestedloops",
        "text": "Now that we know how to turn an image into data using importImage, we can use EarSketch to turn that data into sound. Let\u2019s go back to our checkerboard. We can turn it into a drum beat by writing code that will create a beat with hits on the black squares and rests on the white squares."
    },
    {
        "title": "Chapter 23 Summary",
        "id": "/en/v1/sonification.html#chapter23summary",
        "text": "Sonification is way to turn any data into audio."
    },
    {
        "title": "Questions",
        "id": "/en/v1/sonification.html#chapter-questions",
        "text": "Lists are effective when using sonification because:"
    },
    {
        "title": "Teaching Computers to Listen",
        "id": "/en/v1/teaching-computers-to-listen.html",
        "text": "Up until now, you have been combining audio clips and effects to create music. What if you could get the computer to listen to parts of your composition and change the music based on how it sounds?"
    },
    {
        "title": "Music Information Retrieval",
        "id": "/en/v1/teaching-computers-to-listen.html#musicinformationretrieval",
        "text": "Using a computer to analyze music is part of an area of music technology called Music Information Retrieval (MIR). MIR is widely used in the music technology industry. MIR allows you to do things such as detect a piece of music\u2019s genre, or identify a song by humming it into your phone. In EarSketch we can analyze music and determine the volume or the brightness of a sound."
    },
    {
        "title": "Analysis Features",
        "id": "/en/v1/teaching-computers-to-listen.html#analysisfeatures",
        "text": "Every sound can be analyzed in terms of its features. Features are the ways a computer understands sounds. The analyze() function allows you to find the volume of the sound with RMS_AMPLITUDE. analyze()  also lets you work out how bright or dark a sound is with SPECTRAL_CENTROID. You can think of this as the amount of high sounds (bright) or low sounds (dark). More information on SPECTRAL_CENTROID and RMS_AMPLITUDE is available in the Reference Section."
    },
    {
        "title": "Boolean Operators",
        "id": "/en/v1/teaching-computers-to-listen.html#booleanoperators",
        "text": "Suppose we want to add a clip to the DAW if both the spectral centroid (brightness/darkness) AND the RMS amplitude (volume) are above a certain amount. How can we check for two conditions together?"
    },
    {
        "title": "Chapter 22 Summary",
        "id": "/en/v1/teaching-computers-to-listen.html#chapter22summary",
        "text": "Music Information Retrieval (MIR) is a field in music technology that includes ways for a computer to listen to music."
    },
    {
        "title": "Questions",
        "id": "/en/v1/teaching-computers-to-listen.html#chapter-questions",
        "text": "Select the statement below that is not true:"
    },
    {
        "title": "Sorting",
        "id": "/en/v1/sorting.html",
        "text": "In this section, we\u2019ll learn more about what we can do with analysis features and lists. A list is a data structure that provides a way of storing and indexing many values in a single variable. These values will often be unsorted and just in the order we entered them in. However, we may want to order these values, such as from smallest to largest. To see how, try running the following code:"
    },
    {
        "title": "Sorting and Analysis",
        "id": "/en/v1/sorting.html#sortingandanalysis",
        "text": "In this section, we\u2019ll learn more about what we can do with analysis features and lists. A list is a data structure that provides a way of storing and indexing many values in a single variable. These values will often be unsorted and just in the order we entered them in. However, we may want to order these values, such as from smallest to largest. To see how, try running the following code:"
    },
    {
        "title": "Chapter 24 Summary",
        "id": "/en/v1/sorting.html#chapter24summary",
        "text": "A list is a way to store and index variables."
    },
    {
        "title": "Questions",
        "id": "/en/v1/sorting.html#chapter-questions",
        "text": "Select the statement below that is not true:"
    },
    {
        "title": "Recursion",
        "id": "/en/v1/recursion.html",
        "text": "In this module, we introduce an important concept in both computer science and artistic practice: the idea of self-similarity, and its related programming technique recursion. Self-similarity is when a part of an object is similar to the entire object."
    },
    {
        "title": "What is a Fractal?",
        "id": "/en/v1/recursion.html#whatisafractal",
        "text": "In this module, we introduce an important concept in both computer science and artistic practice: the idea of self-similarity, and its related programming technique recursion. Self-similarity is when a part of an object is similar to the entire object."
    },
    {
        "title": "What is Recursion? (Part 1)",
        "id": "/en/v1/recursion.html#whatisrecursionpt1",
        "text": "In computer science, one of the main ways that self-similarity is shown is through a technique called recursion. Recursion is found whenever a function calls itself from within the body of its own code. In the example function countdown() below, we can see at that it calls itself from within its own body of code. This means that countdown() is a recursive function, and the call inside itself is a recursive call."
    },
    {
        "title": "What is Recursion? (Part 2)",
        "id": "/en/v1/recursion.html#whatisrecursionpt2",
        "text": "Now that we understand the basics of recursion, it\u2019s time to see how we can use recursion to make music with EarSketch."
    },
    {
        "title": "Cantor Set",
        "id": "/en/v1/recursion.html#cantorset",
        "text": "As a straightforward example of self-similarity that may be used toward great musical effect, consider the Cantor Set shown below."
    },
    {
        "title": "Chapter 25 Summary",
        "id": "/en/v1/recursion.html#chapter25summary",
        "text": "Self-similarity refers to a part of an object being similar to the object as a whole."
    },
    {
        "title": "Questions",
        "id": "/en/v1/recursion.html#chapter-questions",
        "text": "A function can:"
    },
    {
        "title": "Analysis Features",
        "id": "/en/v1/analysis-features.html",
        "text": "This document details each of the Analysis features that can be used with the analysis functions in the EarSketch API (analyze(),analyzeForTime(), analyzeTrack(), and analyzeTrackForTime()). Each of these features can be used by using the appropriate constant (which is specified with each description). These features are possible ways to determine differences in audio samples. This difference, or timbre, is how humans are able to tell the difference between instruments. For example, it\u2019s possible to distinguish between playing a C note on a piano, from a C note on a trombone. Each of these measurements returns a value between 0.0 and 1.0, and it is encouraged to try out different features if one does not work for your particular situation."
    },
    {
        "title": "Spectral Centroid",
        "id": "/en/v1/analysis-features.html#spectralcentroid",
        "text": "Constant \u2013 SPECTRAL_CENTROID"
    },
    {
        "title": "Spectrum of a low Spectral Centroid value:",
        "id": "/en/v1/analysis-features.html#spectrumofalowspectralcentroidvalue",
        "text": "Here is an image of a low spectral centroid:"
    },
    {
        "title": "Spectrum of a high Spectral Centroid value:",
        "id": "/en/v1/analysis-features.html#spectrumofahighspectralcentroidvalue",
        "text": "Here is an image of a high spectral centroid:"
    },
    {
        "title": "RMS Amplitude",
        "id": "/en/v1/analysis-features.html#rmsamplitude",
        "text": "Constant \u2013 RMS_AMPLITUDE"
    },
    {
        "title": "Time vs. Amplitude plot of a low RMS Amplitude value:",
        "id": "/en/v1/analysis-features.html#timevsamplitudeplotofalowrmsamplitudevalue",
        "text": "Here is an image of a low RMS amplitude:"
    },
    {
        "title": "Time vs. Amplitude plot of a high RMS Amplitude value:",
        "id": "/en/v1/analysis-features.html#timevsamplitudeplotofahighrmsamplitudevalue",
        "text": "Here is an image of a high RMS amplitude:"
    },
    {
        "title": "Additional Curricula",
        "id": "/en/v1/ch_AdditionalCurricula.html",
        "text": "Introduction to Programming in Python and EarSketch is a free online textbook that is available as an alternative text to this curriculum. The text includes Python programming examples and exercises both within and outside of EarSketch, and it focuses more on string, list, user input, and file processing. It was developed by collaborators at Georgia Tech and Georgia Gwinnett College specifically for college-level introductory programming courses. To access the online textbook in a new browser window, click this link."
    },
    {
        "title": "Hour of Code with EarSketch",
        "id": "/en/v1/ch_HourOfCode.html",
        "text": "Welcome to the EarSketch Hour of Code."
    },
    {
        "title": "What is EarSketch?",
        "id": "/en/v1/ch_HourOfCode.html#WhatIs",
        "text": "EarSketch is a platform for making music with code. In this Hour of Code tutorial, you will learn the basics of coding in EarSketch and will be able to make music like this:"
    },
    {
        "title": "Getting Started",
        "id": "/en/v1/ch_HourOfCode.html#GettingStarted",
        "text": "Below is some code created in EarSketch. It is written in a programming language called Python. Click the blue icon in the upper right corner to copy the code into the code editor. Don\u2019t worry about understanding the code yet."
    },
    {
        "title": "Run The Code",
        "id": "/en/v1/ch_HourOfCode.html#RunTheCode",
        "text": "Run the example code by pressing the green \"Run\" button at the top of the code editor."
    },
    {
        "title": "Adding Sound Clips",
        "id": "/en/v1/ch_HourOfCode.html#Clips",
        "text": "Above the clips is a timeline which displays time in seconds (top) and measures (bottom). Measure is a musical term for a length of time."
    },
    {
        "title": "Changing the End Time of a Clip",
        "id": "/en/v1/ch_HourOfCode.html#ChangeEnd",
        "text": "Let\u2019s change line 7 so the sound clip ends at measure 9 instead of 5. The line should now look like this:"
    },
    {
        "title": "Changing the Start Time of a Clip",
        "id": "/en/v1/ch_HourOfCode.html#ChangeStart",
        "text": "Now let\u2019s look at line 8. The line reads:"
    },
    {
        "title": "Experiment with Start and End Times",
        "id": "/en/v1/ch_HourOfCode.html#StartAndEnd",
        "text": "Now that you know how to change the start and end times of clips in EarSketch, you can customize the music."
    },
    {
        "title": "Drum Fills",
        "id": "/en/v1/ch_HourOfCode.html#DrumFills",
        "text": "Line 14 of the code uses the makeBeat() function. This function allows you to make custom rhythms."
    },
    {
        "title": "Variables",
        "id": "/en/v1/ch_HourOfCode.html#Vars",
        "text": "In this example, fillA is a variable. Variables hold data such as numbers or words to be used later in the code."
    },
    {
        "title": "Editing Beat Strings",
        "id": "/en/v1/ch_HourOfCode.html#BeatStrings",
        "text": "EarSketch has a function called reverseString() which can reverse the order of the characters in a string."
    },
    {
        "title": "Making a New Fill",
        "id": "/en/v1/ch_HourOfCode.html#NewFill",
        "text": "We can use fillRev in a makeBeat() function. Instead of editing the existing makeBeat() function, we will make a new one to add a second drum fill to the music."
    },
    {
        "title": "Add Your Own Fill",
        "id": "/en/v1/ch_HourOfCode.html#UserFill",
        "text": "Use what you\u2019ve learned to write another makeBeat() call at a different measure with a different beat string."
    },
    {
        "title": "Using Comments",
        "id": "/en/v1/ch_HourOfCode.html#Comments",
        "text": "Throughout the example code, you\u2019ll see section labels such as # Add Sounds, # Fills, and # More Sounds. The \"#\" symbol at the start of the line means that line is a comment. Comments provide information about the code but are ignored by the computer."
    },
    {
        "title": "Adding More Sounds",
        "id": "/en/v1/ch_HourOfCode.html#AddSounds",
        "text": "Under the # More Sounds comment, there is a series of fitMedia() functions that are commented out. Each contains a different sound."
    },
    {
        "title": "Make Your Own Song",
        "id": "/en/v1/ch_HourOfCode.html#MakeYourOwn",
        "text": "It is time to make your own music using EarSketch."
    },
    {
        "title": "Going Further With EarSketch",
        "id": "/en/v1/ch_HourOfCode.html#GoingFurther",
        "text": "EarSketch offers much more than we had time to cover in the last hour. There is a full length curriculum included in this panel. It can be accessed by clicking the Table of Contents icon at the top right of the browser window."
    },
    {
        "title": "Your Voice is Power: Module 1",
        "id": "/en/v1/ch_YVIPModule1.html",
        "text": "The challenge is out\u2026it\u2019s time to start making music.  Your song for this competition will be a remix including one or more stems from  Pharrell\u2019s new hit song Entrepreneur."
    },
    {
        "title": "Entrepreneur",
        "id": "/en/v1/ch_YVIPModule1.html#Entrepreneur",
        "text": "The challenge is out\u2026it\u2019s time to start making music.  Your song for this competition will be a remix including one or more stems from  Pharrell\u2019s new hit song Entrepreneur."
    },
    {
        "title": "Messaging in the Music",
        "id": "/en/v1/ch_YVIPModule1.html#Messaginginthemusic",
        "text": "In order to help us better understand the message behind Pharrell\u2019s music, we\u2019ve enlisted the help of Dr. Joycelyn Wilson, a professor of Hip Hop Studies and Digital Humanities in the School of Literature, Media, and Communication at Georgia Tech. Dr. Wilson is a scholar in Black Media Studies and she created a framework to help her students decode song lyrics to find the true meaning of an artist\u2019s lyrics."
    },
    {
        "title": "Equity and Entrepreneurship",
        "id": "/en/v1/ch_YVIPModule1.html#EquityandEntrepreneurship",
        "text": "We are now going to take a deeper dive to gain a common understanding of three really important themes that are deeply embedded within this song\u2019s lyrics and challenge.  With an understanding of these themes, you will be able to start to think about your message as you code your competition remix.  These three themes are entrepreneurship, equity, and racism. You probably have heard these terms before.  Think about how you would define them and then see below how we will define them in the competition."
    },
    {
        "title": "Remix",
        "id": "/en/v1/ch_YVIPModule1.html#Remix",
        "text": "Pharrell is excited to see how you can creatively remix his music.  Many of you may have heard the term remix as you listen to today\u2019s top hits on the radio.  Remixing a piece of music gives it a new life\u2014it changes its style, mood, tempo, and harmony.  You can remix music by combining, rearranging, adding, repeating, or removing elements of a song to create a new music composition."
    },
    {
        "title": "Beginning to Code with EarSketch",
        "id": "/en/v1/ch_YVIPModule1.html#BeginningtoCodewithEarSketch",
        "text": "The text that you pasted into your code editor to play the remix was written in the Python coding language. Python is a programming language that is used for web development, gaming, education, and graphics. However, if you would prefer to code in JavaScript, you also have that option in EarSketch."
    },
    {
        "title": "Creating a Basic Script",
        "id": "/en/v1/ch_YVIPModule1.html#CreatingaBasicScript",
        "text": "The text that you pasted into your code editor is called a script. Your script is code that the computer understands as a set of directions.  Just as you would follow a basic recipe to bake a cake, the computer will follow a recipe to play your music."
    },
    {
        "title": "Comments",
        "id": "/en/v1/ch_YVIPModule1.html#Comments",
        "text": "Look at the YVIP Sample Script in the code editor.  You will notice the script is numbered; we are going to start by looking at our first five lines."
    },
    {
        "title": "Conclusion: Module 1",
        "id": "/en/v1/ch_YVIPModule1.html#Module1Conclusion",
        "text": "Congratulations, you have successfully completed Module 1."
    },
    {
        "title": "Your Voice is Power: Module 2",
        "id": "/en/v1/ch_YVIPModule2.html",
        "text": ""
    },
    {
        "title": "Layers of Injustice",
        "id": "/en/v1/ch_YVIPModule2.html#LayersofInjustice",
        "text": ""
    },
    {
        "title": "Messaging in the Music",
        "id": "/en/v1/ch_YVIPModule2.html#MessagingintheMusic",
        "text": "Let\u2019s look at the lyrics to get started. Click on the link below to listen and think about Pharrell\u2019s meaning behind these lines. Ask questions like \u201cWho is he talking about\u201d, \u201cIf there is an action, who is doing it or affected by it?\u201d, \u201cWho is he talking to and what information is he trying to give them?\u201d, \u201cAre there words or phrases that can have more than one meaning?\u201d.  As you listen to the clip, think about the themes from Dr. Wilson\u2019s OUTKAST Imagination Framework"
    },
    {
        "title": "Defining Types of Racism",
        "id": "/en/v1/ch_YVIPModule2.html#DefiningTypesofRacism",
        "text": "We want for you to continue to build your knowledge about the themes of equity, entrepreneurship, and racism throughout this experience.  The more knowledge you have on these topics, the easier it will be for you to code your message in your song."
    },
    {
        "title": "Layers of Music",
        "id": "/en/v1/ch_YVIPModule2.html#LayersofMusic",
        "text": "Let\u2019s explore how to use sounds and instruments to communicate a message in music.  Most songs layer different instruments and sounds to create a desired harmony.  Can you guess how many different and sounds were used to create the \u201cEntrepreneur\u201d song?"
    },
    {
        "title": "Starting Your Song",
        "id": "/en/v1/ch_YVIPModule2.html#StartingYourSong",
        "text": "It\u2019s time to start your song by creating a new script to code your \u201cYour Voice Is Power\u201d Song\u201d   Below we provided  an outline for your song.  Click the blue clipboard icon to copy the code in the box below into your code editor. When it pastes in the code editor, click import to edit."
    },
    {
        "title": "Creating Your Sound Bank",
        "id": "/en/v1/ch_YVIPModule2.html#CreatingYourSoundBank",
        "text": "Now that you have the outline of your script, let\u2019s add some music.  EarSketch has audio stems from genres such as R&B, Hip Hop, EDM, House, Pop and Funk (and many more),\nand from over 300 different instrument samples. In addition to Pharrell, we have sound slips\nfrom recording artists and sound engineers such as Ciara, Common, Richard Devine, and\nYoung Guru. (Click on the artists\u2019 name to learn more about their music)"
    },
    {
        "title": "Adding Sound Clips",
        "id": "/en/v1/ch_YVIPModule2.html#AddingSoundClips",
        "text": "We have our sounds and even assigned them cool nicknames (or variables).  Now, you should be ready to remix them in your song.  In order to add a sound clip in EarSketch, we use the function fitMedia(). A function is a piece of code that you can easily call\nover and over again.\u201d  The  fitMedia() function adds an audio files to a specified track at specific start and end times. Using fitMedia on its own won\u2019t automatically play the music.  You will need to provide the arguments  in order for the computer to know what to do."
    },
    {
        "title": "Your Voice is Power: Module 3",
        "id": "/en/v1/ch_YVIPModule3.html",
        "text": ""
    },
    {
        "title": "Set Your Own Tempo",
        "id": "/en/v1/ch_YVIPModule3.html#_set_your_own_tempo",
        "text": "Welcome back students!  We are ready to start Module 3 of Your Voice Is Power Learning Experience  You continue to investigate how music, computer science, and entrepreneurship are pathways to promote racial equity and gain additional skills to help you code your\nfinal song for the competition. You will hear the stories of amazing entrepreneurs who \u201cset their own tempo,\u201d before learning to code your own unique beat and tempo in EarSketch.\u201d"
    },
    {
        "title": "Messaging in the Music",
        "id": "/en/v1/ch_YVIPModule3.html#_messaging_in_the_music",
        "text": "Let\u2019s start off today by studying the chorus of \"Entrepreneur\"  Click on the Entrepreneur audio below  to listen to the chorus twice. The first time you listen to the chorus, think about the meaning of the lyrics. What themes from Dr. Wilson\u2019s OUTKAST Imagination Framework do you hear?  Listen to the file again, think about the beat of the song.  How does it make you feel?  What is the mood of the song?"
    },
    {
        "title": "Entrepreneurs",
        "id": "/en/v1/ch_YVIPModule3.html#_entrepreneurs",
        "text": "Before we start adding to our code, we are going to learn a little bit more about entrepreneurship and why it is so important for racial equity!  Your first question may be\u2009\u2014\u2009What is an Entrepreneur?"
    },
    {
        "title": "Tempo",
        "id": "/en/v1/ch_YVIPModule3.html#_tempo",
        "text": "These entrepreneurs have set their own tempo to defy the odds. Now it\u2019s your turn to set\nthe tempo of your code and make your message heard."
    },
    {
        "title": "Change Your Tempo",
        "id": "/en/v1/ch_YVIPModule3.html#_change_your_tempo",
        "text": "Changing the tempo is a great way to remix a song \u2014 you\ncan edit one number in EarSketch and change a slow song\ninto a techno dance hit."
    },
    {
        "title": "Defining Measures",
        "id": "/en/v1/ch_YVIPModule3.html#_defining_measures",
        "text": "Chalece and Mike started to build their song today \u2014 now it is your turn. Chalece discusses\nbuilding the song in blocks of 4 and 8. Why do we do this? In music, beats are grouped into\ngroups of 4. Each group of 4 beats is called a measure (or note). Each beat is a quarter note\nin a piece of music. One measure has 4 quarter notes or 4 beats."
    },
    {
        "title": "Building Your 16 Measure Song",
        "id": "/en/v1/ch_YVIPModule3.html#_building_your_16_measure_song",
        "text": "Have you heard many songs that are only 8 seconds long? Maybe only on TikTok. Your remix song will need to be at least 30 seconds or 16 measures. So, how do you extend your 8 second (4 measure) song to 30 seconds or 16 measures)? Any ideas from the video on how to do this?\u201d"
    },
    {
        "title": "Building Your 16 Measure Song - Part 2",
        "id": "/en/v1/ch_YVIPModule3.html#_building_your_16_measure_song_part_2",
        "text": "Now it is time to build your own 16 measure song. You will start with your five tracks from Module 2 and add additional tracks to your YVIP code.  You can also stagger the start and end measures of your first five tracks."
    },
    {
        "title": "Conclusion Module 3",
        "id": "/en/v1/ch_YVIPModule3.html#_conclusion_module_3",
        "text": "Congratulations, you have successfully completed Module 3 and coded a song!"
    },
    {
        "title": "Your Voice is Power: Module 4",
        "id": "/en/v1/ch_YVIPModule4.html",
        "text": ""
    },
    {
        "title": "Structure of a Song",
        "id": "/en/v1/ch_YVIPModule4.html#_structure_of_a_song",
        "text": "Welcome to Module 4 of the 'Your Voice Is Power' Learning Experience. We will continue to investigate how music, computer science, and entrepreneurship are\npathways to promote racial equity, and you\u2019ll continue to gain skills to help you code your final song for the competition. Today, you will get to meet a few more activists/allies and see how everyone can play a part in the movement toward racial equality. You\u2019ll also get a chance to examine the different\nparts of a song. Whether it\u2019s a song or a movement, every part (or person!) has its purpose."
    },
    {
        "title": "Messaging in the Music",
        "id": "/en/v1/ch_YVIPModule4.html#_messaging_in_the_music",
        "text": "Each lyric has a purpose and a place in Entrepreneur. As we explore the structure of a song today, think about why certain lyrics may be at the beginning, middle, or end of the song. We will read through the first half of the second verse of Entrepreneur whichfeatures Jay-Z.  As you listen/read to each line, think about whether the line  describes a builder (something that helps) or barrier (something that hurts) for Black entrepreneurship."
    },
    {
        "title": "What does it mean to be an Ally or an Activist?",
        "id": "/en/v1/ch_YVIPModule4.html#_what_does_it_mean_to_be_an_ally_or_an_activist",
        "text": "The \"Your Voice is Power\" experience is giving you the opportunity to participate in the fight to promote equity in our world. There are a variety of ways to act, advocate, and be an activist for racial justice."
    },
    {
        "title": "Song Structure",
        "id": "/en/v1/ch_YVIPModule4.html#_song_structure",
        "text": "In the same way you have seen that every person plays a part, you will also learn how every part of\na song plays a part. Run your code and play your song in the EarSketch DAW.  Think about how it sounds to a listener. Does your code sound like a song you might hear on the radio/YouTube? If it doesn\u2019t, what\nis missing?"
    },
    {
        "title": "Introduction to Custom Functions",
        "id": "/en/v1/ch_YVIPModule4.html#_introduction_to_custom_functions",
        "text": "It\u2019s time to transform your code into a song. How do you do this without writing lines and lines\nof code? You may already have ~40 lines of code, and only coded 16 measures. Imagine you want\nto code a 2-minute song \u2014 you might end up with 150 lines of code! Woah, that is exhausting to\nthink about!"
    },
    {
        "title": "Writing Custom Functions",
        "id": "/en/v1/ch_YVIPModule4.html#_writing_custom_functions",
        "text": "Just like any built-in function in EarSketch, when you write your own code, it needs inputs\nor parameters (arguments).  When we write our custom function to define our song sections, we will use time as our inputs. In EarSketch, we use measures to represent time.  We are going to write this function to define the verse of our song with our inputs being (startmeasure, endmeasure)"
    },
    {
        "title": "Coding Custom Functions in EarSketch",
        "id": "/en/v1/ch_YVIPModule4.html#_coding_custom_functions_in_earsketch",
        "text": "You are now going to create a section in EarSketch using a custom function. For the\ncompetition submission, you will need to have at least one custom function in your code to define a section in your song."
    },
    {
        "title": "Conclusion: Module 4",
        "id": "/en/v1/ch_YVIPModule4.html#_conclusion_module_4",
        "text": "Congratulations, you have successfully completed Module 4 and coded a song!"
    },
    {
        "title": "Bonus -Functions with Staggered Start and End Measures",
        "id": "/en/v1/ch_YVIPModule4.html#_bonus_functions_with_staggered_start_and_end_measures",
        "text": "If you want to stagger the start and end of your measures when writing your custom\nfunctions, you can easily do this using addition and subtraction with measure numbers (e.g., start +1\nor end-1)."
    },
    {
        "title": "Your Voice is Power: Submit Your Remix",
        "id": "/en/v1/ch_YVIP_FinalSubmission.html",
        "text": "Are you ready? The time is now to create your remix. For your final challenge,\nyou will code a song in EarSketch remixing stems from Pharrell\u2019s song Entrepreneur that uses\nyour \u201cvoice\u201d (or includes a message). Think about the call to action and how you can build on your EarSketch knowledge to use code to express your voice.  Below you will find resources to help you continue to work on your submission.  When you have completed your code, debug (see directions below) and then submit to the competition.  Pharrell is so excited to see what you can produce."
    },
    {
        "title": "Submit Your Remix",
        "id": "/en/v1/ch_YVIP_FinalSubmission.html#SubmitYourRemix",
        "text": "Are you ready? The time is now to create your remix. For your final challenge,\nyou will code a song in EarSketch remixing stems from Pharrell\u2019s song Entrepreneur that uses\nyour \u201cvoice\u201d (or includes a message). Think about the call to action and how you can build on your EarSketch knowledge to use code to express your voice.  Below you will find resources to help you continue to work on your submission.  When you have completed your code, debug (see directions below) and then submit to the competition.  Pharrell is so excited to see what you can produce."
    },
    {
        "title": "Unit 1 Introduction",
        "id": "/en/v1/ch_u1_intro.html",
        "text": "The first unit covers the fundamentals of making music in EarSketch, from writing your first line of code to creating entire songs. It begins with a walkthrough and example of using the EarSketch interface. We learn how to write code that makes music. By the end of the first chapter, you will be able to write your own code and make your own music!"
    },
    {
        "title": "Getting Started with EarSketch",
        "id": "/en/v1/getting-started.html",
        "text": "This chapter covers the basic functionality of EarSketch. It explains the layout of the site and how to navigate through the various workspace panes. Most importantly, it provides tools for making a piece of music!"
    },
    {
        "title": "Why Learn Programming for Music?",
        "id": "/en/v1/getting-started.html#whylearnprogrammingformusic",
        "text": "Computers have greatly expanded the possibilities for getting involved in music. The musician\u2019s toolbox has grown, and new skills are needed to use these tools. Programming involves creativity, so it fits well with making music. You\u2019ll learn to think in both a structured and creative way, which is a valuable combination."
    },
    {
        "title": "Tools of the Trade: DAWs and APIs",
        "id": "/en/v1/getting-started.html#toolsofthetrade",
        "text": "The Digital Audio Workstation, or DAW, is the main tool for producing music on a computer. A DAW is specialized computer software for recording, editing, and playing digital audio files. In the context of a DAW, these audio files are called clips. The DAW allows you to edit and combine multiple clips simultaneously on a musical timeline, making it easy to synchronize and visualize different parts. DAWs are used in both professional recording studios and in home laptop-based studios. Some popular DAWs include Pro Tools and Logic Pro, GarageBand, and Reaper."
    },
    {
        "title": "The EarSketch Workspace",
        "id": "/en/v1/getting-started.html#ESworkspace",
        "text": "Here are the different sections of the EarSketch workspace:"
    },
    {
        "title": "Running a Script",
        "id": "/en/v1/getting-started.html#runningascript",
        "text": "The basic workflow for making a song in EarSketch follows: type your musical code into the code editor, press the run button to execute the code and add the music to the DAW, and press play in the DAW to hear it."
    },
    {
        "title": "Adding Comments",
        "id": "/en/v1/getting-started.html#addingcomments",
        "text": "Let\u2019s make a small modification to the current project. We\u2019ll add our name to the project. On lines 1-10, notice that each line starts with a pound sign: #. The computer does not execute a line of code that is preceded by #. This is called a comment. Comments are used by programmers to make notes on their code for them or other programmers to read later. On line 5 of the previous example, type your name to the right of \"author:\"."
    },
    {
        "title": "The DAW in Detail",
        "id": "/en/v1/getting-started.html#thedawindetail",
        "text": "Take a look at the DAW. The DAW consists of several items:"
    },
    {
        "title": "What is Programming?",
        "id": "/en/v1/getting-started.html#whatisprogramming",
        "text": "A computer program is a sequence of instructions that the computer executes. It is used to accomplish a specific task or set of tasks. Programming is the process of designing, writing, testing, debugging, and maintaining the code of computer programs. This code can be written in a wide variety of computer programming languages. Some of these languages include Java, C, Python, and JavaScript."
    },
    {
        "title": "Sections of an EarSketch Script",
        "id": "/en/v1/getting-started.html#sectionsofanearsketchscript",
        "text": "In EarSketch, we will structure all of our sample projects in roughly the same way: as 4 sections marked by comments, each with a different purpose:"
    },
    {
        "title": "Creating a New Script",
        "id": "/en/v1/getting-started.html#creatinganewscript",
        "text": "The following steps walk through how to create a new script in EarSketch."
    },
    {
        "title": "Composing In EarSketch",
        "id": "/en/v1/getting-started.html#composinginearsketch",
        "text": "Let\u2019s make some music with the script we just created. If you missed how to make a new script, jump back a section. Otherwise, follow these steps:"
    },
    {
        "title": "Chapter 1 Summary",
        "id": "/en/v1/getting-started.html#chapter1summary",
        "text": "An algorithm is a set of instructions to be understood and carried out by the computer. Algorithms are written with computer code."
    },
    {
        "title": "Questions",
        "id": "/en/v1/getting-started.html#chapter-questions",
        "text": "Which of the following is not true regarding APIs?\""
    },
    {
        "title": "The Building Blocks of a Program",
        "id": "/en/v1/building-blocks.html",
        "text": "The instructions given in a script allow the computer to process many types of information. This information is structured so that the music produced by EarSketch sounds pleasing. We will continue learning about rhythm, data types, and functions."
    },
    {
        "title": "Rhythm",
        "id": "/en/v1/building-blocks.html#rhythm",
        "text": "When we refer to rhythm of a song, we are describing how sounds are arranged as music flows through time. Musicians use many words to describe rhythm, such as tempo, meter, measure, beat, and sub-beat. These terms are useful in DAWs like EarSketch because they help you to organize the elements of your music in time."
    },
    {
        "title": "Data Types",
        "id": "/en/v1/building-blocks.html#datatypes",
        "text": "Computers store and process information. A set of information is called data. Many different kinds of data are used to construct a program. Programming languages can only work with certain kinds of data. The basic data types that most programming languages can understand are:"
    },
    {
        "title": "Functions",
        "id": "/en/v1/building-blocks.html#functions",
        "text": "You have seen code like setTempo() and fitMedia() consisting of one or two words followed by parentheses. These are called functions. Functions tell the computer what to do based on information given, like setting the tempo or fitting media clips into a project. Their names often include verbs (set, make, analyze). Think of them as verbs of the programming language. To make music, we will use EarSketch API functions, standard Python functions, and later, functions that you will write yourself."
    },
    {
        "title": "Numbers",
        "id": "/en/v1/building-blocks.html#numbers",
        "text": "The fundamental data type in computing is the number. In EarSketch, numbers can be used to describe rhythm to the computer. Every EarSketch script must include a setTempo() function with a number in the parentheses. This tells the computer how fast to play the music."
    },
    {
        "title": "Variables",
        "id": "/en/v1/building-blocks.html#variables",
        "text": "A variable creates a space in the computer\u2019s memory to store data. The name you specify for a variable gives you an easy way to refer to that space and retrieve the stored data. Variables are useful because you can change what they store. You get to pick the name and the value of a variable. However, you should always give your variables names that describe what they will be storing. In EarSketch, variables are used to hold musical values like measureNumber or trackNumber."
    },
    {
        "title": "Constants",
        "id": "/en/v1/building-blocks.html#constants",
        "text": "A constant stores values that never change. In EarSketch, constants are used to refer to audio files that you can add to your project. The \"value\" that these constants refer to is the address for a specific sample. TECHNO_SYNTHPLUCK_001 is a constant. EarSketch assigns its file path, a unique location on the server, to a single value. By convention, constant names are capitalized and do not include spaces; instead they use underscores."
    },
    {
        "title": "Chapter 2 Summary",
        "id": "/en/v1/building-blocks.html#chapter2summary",
        "text": "Rhythm is defined as the arrangement of sounds as music flows through time."
    },
    {
        "title": "Questions",
        "id": "/en/v1/building-blocks.html#chapter-questions",
        "text": "Which of the following is NOT used to describe rhythm?"
    },
    {
        "title": "Debugging and Documenting",
        "id": "/en/v1/debugging-and-documenting.html",
        "text": "Sometimes programmers make mistakes that cause code to work incorrectly, or not run at all. Strategies for overcoming these mistakes are presented in this chapter."
    },
    {
        "title": "What is Debugging?",
        "id": "/en/v1/debugging-and-documenting.html#whatisdebugging",
        "text": "All programmers encounter occasional flaws and unexpected results when running code; no one is immune to mistakes. In programming, coding faults are called errors, or bugs. The process of finding and fixing bugs is called debugging."
    },
    {
        "title": "Documenting Code",
        "id": "/en/v1/debugging-and-documenting.html#documentingcode",
        "text": "Comments are added to programs to make the code easier to understand for programmers and collaborators. They can also be used to help organize code or to make notes for future use. In Python, comments are indicated by a line starting with a # symbol. This symbol tells the computer not to execute the statement on that line."
    },
    {
        "title": "Common Errors",
        "id": "/en/v1/debugging-and-documenting.html#commonerrors",
        "text": "The following list of common errors can help you identify and prevent bugs in your scripts."
    },
    {
        "title": "Debugging Exercise",
        "id": "/en/v1/debugging-and-documenting.html#debuggingexercise",
        "text": "Let\u2019s use knowledge of common errors to debug some example code. The two scripts that follow are supposed to produce the same code, but each contains an error. Paste the scripts into the Code Editor and try to correct each error. You may find that running the code is helpful."
    },
    {
        "title": "Chapter 3 Summary",
        "id": "/en/v1/debugging-and-documenting.html#chapter3summary",
        "text": "Debugging is the process of finding and fixing bugs, errors made by the programmer."
    },
    {
        "title": "Questions",
        "id": "/en/v1/debugging-and-documenting.html#chapter-questions",
        "text": "Which of the following is not a common type of error found in code?"
    },
    {
        "title": "Effects in EarSketch: setEffect",
        "id": "/en/v1/effects-in-earsketch.html",
        "text": "EarSketch lets the composer alter clips to produce new and unique sounds. This is achieved through the setEffect() function, the focus of this chapter. For a complete description of all the EarSketch API functions, see the EarSketch API tab."
    },
    {
        "title": "Using Effects in EarSketch",
        "id": "/en/v1/effects-in-earsketch.html#effectsinearsketch",
        "text": "fitMedia() let us compose music by arranging different audio clips in the DAW. As a composer and producer, you must also pay attention to the characteristics of those sounds. Effects allow us to change qualities of the sounds in a project. Similar to how adding a filter alters a photo, adding an audio effect to a track changes the sound in new and interesting ways. Listen to the reference clip, below, with no effects, and then compare it with the next clip that has a delay effect applied."
    },
    {
        "title": "Chapter 4 Summary",
        "id": "/en/v1/effects-in-earsketch.html#chapter4summary",
        "text": "Effects change the qualities of a sound to make them more unique."
    },
    {
        "title": "Questions",
        "id": "/en/v1/effects-in-earsketch.html#chapter-questions",
        "text": "What does an effect allow you to do in EarSketch?"
    },
    {
        "title": "Effects and Envelopes",
        "id": "/en/v1/effects-and-envelopes.html",
        "text": "Adding effects with setEffect() can completely transform a piece of music. This chapter introduces additional effects and time-varying effects."
    },
    {
        "title": "Envelopes",
        "id": "/en/v1/effects-and-envelopes.html#envelopes",
        "text": "It is not always practical to add an effect to an entire track. Envelopes allow us to add effects to smaller portions of a track and define how an effect\u2019s parameters change over time. They can be used with any effect parameter."
    },
    {
        "title": "Envelopes with setEffect",
        "id": "/en/v1/effects-and-envelopes.html#envelopeswithseteffect",
        "text": "The setEffect() function takes a variable number of arguments. Its full set of arguments is listed below."
    },
    {
        "title": "More Effects",
        "id": "/en/v1/effects-and-envelopes.html#moreeffects",
        "text": "Volume is related to loudness, in which sounds are ordered on a scale from quiet to loud. The gradual increase or decrease in volume, like in the previous example, is called a fade. Fades can be used to start and end a piece, or even to transition between tracks, as detailed in Chapter 14. Fades are achieved by creating a VOLUME envelope with the GAIN parameter. The VOLUME effect can also be used to effectively mix a composition. Mixing is the process of balancing multiple audio tracks to sound cohesive when played together."
    },
    {
        "title": "Chapter 5 Summary",
        "id": "/en/v1/effects-and-envelopes.html#chapter5summary",
        "text": "Envelopes define how an effect parameter changes over time. They are described with value-time pairs, like (value, time, value, time)."
    },
    {
        "title": "Questions",
        "id": "/en/v1/effects-and-envelopes.html#chapter-questions",
        "text": "Which of the following is not a parameter used with setEffect() envelopes?"
    },
    {
        "title": "Tempo and Pitch",
        "id": "/en/v1/tempo-and-pitch.html",
        "text": "It is often challenging to choose sounds that work together when composing in EarSketch. This chapter provides strategies for planning your composition, choosing sounds, and transitioning between musical ideas."
    },
    {
        "title": "Tempo",
        "id": "/en/v1/tempo-and-pitch.html#tempo",
        "text": "Tempo is the speed at which a piece of music is played. It affects the duration of each beat. Tempo is specified in beats per minute (bpm) in Western music. In EarSketch, we set the tempo of our song at the top of each script with setTempo()."
    },
    {
        "title": "Pitch",
        "id": "/en/v1/tempo-and-pitch.html#pitch",
        "text": "Pitch is a quality of sound that determines how high or low it sounds. Humans order relative musical tones on a scale, or set of musical notes, based on how they hear the frequency of the sound. This means pitch and frequency are related, but not synonymous. Pitch, duration, loudness, and timbre all factor into a complete musical tone."
    },
    {
        "title": "Transition Strategies",
        "id": "/en/v1/tempo-and-pitch.html#transitionstrategies",
        "text": "Transitions are passages of music that combine neighboring musical sections. They can connect verse and chorus, build up to a drop, combine collaboratively written sections, mix between tracks (DJing), or change keys. The goal of a transition is to grab the listener\u2019s attention and let them know a change is about to occur. Following are some popular strategies for creating musical transitions:"
    },
    {
        "title": "Chapter 6 Summary",
        "id": "/en/v1/tempo-and-pitch.html#chapter6summary",
        "text": "Tempo is the speed at which a piece of music is played, specified in beats per minute (bpm). Tempo is tied to genre; often different genres adhere to a particular tempo range."
    },
    {
        "title": "Questions",
        "id": "/en/v1/tempo-and-pitch.html#chapter-questions",
        "text": "What does setTempo() allow you to do in EarSketch?"
    },
    {
        "title": "Copyright",
        "id": "/en/v1/copyright.html",
        "text": "Ownership of compositions and recordings can be confusing. Basic copyright in music and tips for obtaining permission to use sounds are covered in this chapter."
    },
    {
        "title": "What is Copyright?",
        "id": "/en/v1/copyright.html#whatiscopyright",
        "text": "How do we define ownership of things that are not concrete? Someone cannot steal a song that you wrote in the same way that they can steal your car, but that song still has value. Ownership of these things exists as well; we call this intellectual property. Copyright is the part of law that covers ownership of creative work. It tells us what other people can and can\u2019t do with creative works. As musicians, copyright is important because:"
    },
    {
        "title": "Copyright Basics",
        "id": "/en/v1/copyright.html#copyrightbasics",
        "text": "The first thing you should know about copyright: you probably already have one! To get a copyright for something, you just have to create something original and substantial enough outside your head (maybe not that 140-character Twitter status). Generally, if you make something creative and new, you have a copyright automatically. In the United States, having a copyright gives you six exclusive rights over what you create:"
    },
    {
        "title": "Copyright in Music",
        "id": "/en/v1/copyright.html#copyrightinmusic",
        "text": "There are actually two copyrights involved with a song, rights to the song and rights to the sound recording. Rights to a song refers to ownership by the writer or composer. Conversely, rights to a sound recording refers to the record label. This means when someone needs permission to use a song, they might have to get permission twice."
    },
    {
        "title": "Legal Issues with Sampling",
        "id": "/en/v1/copyright.html#legalissueswithsampling",
        "text": "Sampling means taking part of a sound recording and using it in a new piece of music. All of the sounds in the EarSketch library are samples. You are not creating sounds from scratch, but instead combining and using them in new ways."
    },
    {
        "title": "Fair Use",
        "id": "/en/v1/copyright.html#fairuse",
        "text": "Copyright law has some exceptions. Copyright is important, but so is free speech and creativity. In the United States, fair use is the part of law that acts as a \"safety net\" to keep copyright from going too far. It allows for use of copyrighted content under certain conditions."
    },
    {
        "title": "Licensing and Free Culture",
        "id": "/en/v1/copyright.html#licensingandfreeculture",
        "text": "To license is to give permission. If you own a copyright for something and you want to let someone else use it, you typically do not just sign over your copyright. Instead, you give them permission. Permission can be given on an individual basis, like sampling licenses. You can also put a license on your work that lets anyone use it. For example, all of the samples in the EarSketch sound library are licensed so that you are allowed to use them however you like. This means that all the music you create in EarSketch is totally yours. You have the copyright, and you can do what you want with it."
    },
    {
        "title": "Chapter 7 Summary",
        "id": "/en/v1/copyright.html#chapter7summary",
        "text": "Copyright is a portion of law that covers ownership of creative work, like music. It is important to musicians because it defines how another person\u2019s work can be used and shared."
    },
    {
        "title": "Questions",
        "id": "/en/v1/copyright.html#chapter-questions",
        "text": "Which of the following would be considered an example of Fair Use?"
    },
    {
        "title": "Evaluating Correctness: Part One",
        "id": "/en/v1/evaluating-correctness.html",
        "text": "An evaluation, or assessment, is a judgment about the quality or value of something. It is important to evaluate code in order to determine its correctness and completeness."
    },
    {
        "title": "Self Assessment",
        "id": "/en/v1/evaluating-correctness.html#selfassessment",
        "text": "When assessing your own code, take multiple things into consideration. These considerations are both from the perspective of the computer and the human. The computer is only concerned with what the code does, but you are also concerned with how the code achieves its goals. This idea of a human perspective is important because, after all, your code is going to be read by other humans!"
    },
    {
        "title": "Performing an Evaluation",
        "id": "/en/v1/evaluating-correctness.html#performinganevaluation",
        "text": "It is helpful to ask yourself questions when evaluating your code, even if you think you already know the answer. This set of questions should be extensive, taking into the account the considerations presented earlier in this chapter. Below is a sample set of questions to help you perform a thorough evaluation of your code:"
    },
    {
        "title": "Chapter 8 Summary",
        "id": "/en/v1/evaluating-correctness.html#chapter8summary",
        "text": "A code evaluation is a judgment of the quality or value of a script. It is an assessment that allows the programmer to determine if a program functions correctly."
    },
    {
        "title": "Unit 1 Summary",
        "id": "/en/v1/ch_u1_summary.html",
        "text": "Let\u2019s review the material covered so far."
    },
    {
        "title": "Unit 2 Introduction",
        "id": "/en/v1/ch_u2_intro.html",
        "text": "Computer scientists and software engineers work hard to write code that is clear and concise, making it easy to understand, easy to change, and easy to use again. As you become more comfortable with writing clear and concise code in this unit, you will be able to share ideas and collaborate with others. Better still, you will be able to customize aspects of your code, making it easier for you to experiment with new musical ideas that result in more interesting, exciting, and unique music."
    },
    {
        "title": "Musical Form and Custom Functions",
        "id": "/en/v1/musical-form-and-custom-functions.html",
        "text": "This chapter focuses on coding large-scale changes in music efficiently, which will help you create longer compositions with EarSketch."
    },
    {
        "title": "Sections and Form",
        "id": "/en/v1/musical-form-and-custom-functions.html#sectionsandform",
        "text": "Several measures that express an idea or feeling make up a section. Songs that contain multiple sections allow for variety and structure, or form. Intros, Verses, Choruses, and Outros are examples of sections that contribute to form."
    },
    {
        "title": "A-B-A Form",
        "id": "/en/v1/musical-form-and-custom-functions.html#abaform",
        "text": "The most common form is A-B-A, as it tends to work well musically. The B section adds variety, while returning to the A section invokes familiarity. The code below creates an ABA form:"
    },
    {
        "title": "Custom Functions",
        "id": "/en/v1/musical-form-and-custom-functions.html#customfunctions",
        "text": "Custom functions allow you to write your own functions and avoid repetitive code. You can give them any name and run them anywhere."
    },
    {
        "title": "Abstraction",
        "id": "/en/v1/musical-form-and-custom-functions.html#abstraction",
        "text": "In programming we can create abstractions, just as we group musical ideas into sections. An abstraction is a bundling of ideas to form a single concept. Functions are one kind of abstraction used in computer science. They pack multiple statements into one tool so they can be easily referred to. They also help manage the complexity of a program; the user doesn\u2019t have to worry about what is in the function body. Abstractions can make the form of a program more clear, which is helpful when writing and debugging large programs."
    },
    {
        "title": "Chapter 9 Summary",
        "id": "/en/v1/musical-form-and-custom-functions.html#chapter9summary",
        "text": "Sections are related musical units consisting of multiple measures. Each expresses an idea or feeling."
    },
    {
        "title": "Questions",
        "id": "/en/v1/musical-form-and-custom-functions.html#chapter-questions",
        "text": "Which of these is NOT an example of a musical section?"
    },
    {
        "title": "Recording & Uploading Sounds",
        "id": "/en/v1/recording-and-uploading-sounds.html",
        "text": "This chapter details the steps for recording and uploading sounds to EarSketch. We are also going to look at how these procedures are achieved in the computer."
    },
    {
        "title": "Recording & Uploading Sounds",
        "id": "/en/v1/recording-and-uploading-sounds.html#recordinganduploadingsounds",
        "text": "In addition to the extensive sound library, EarSketch offers the ability to upload your own audio through the Sounds Browser. Clicking on the \"Add Your Own Sound\" link will open a window and present you with two options: File Upload, and Quick Record. File Upload allows you to choose audio files (.mp3, .aiff, and so on) already on your computer, and Quick Record lets you record short clips directly into the EarSketch library. Check out the video below for more information on how to use your own sounds in EarSketch:"
    },
    {
        "title": "Processes and Memory",
        "id": "/en/v1/recording-and-uploading-sounds.html#processesandmemory",
        "text": "Processes, or tasks, are programs that run on your computer. The computer\u2019s CPU, or Central Processing Unit, carries them out. The CPU is a set of complex electronic circuitry that acts as your computer\u2019s control center. Many modern computers have multiple processing units, allowing multiple processes to be executed in parallel."
    },
    {
        "title": "Chapter 10 Summary",
        "id": "/en/v1/recording-and-uploading-sounds.html#chapter10summary",
        "text": "You can upload your own sounds to EarSketch through the Sound Browser. Just click \"Add Your Own Sound\"."
    },
    {
        "title": "Questions",
        "id": "/en/v1/recording-and-uploading-sounds.html#chapter-questions",
        "text": "Which of the following statements is true?"
    },
    {
        "title": "Making Custom Beats: makeBeat",
        "id": "/en/v1/making-custom-beats.html",
        "text": "makeBeat() allows us to compose music note by note instead of at the measure level, perfect for drum beats. This approach is often called step sequencing in music production."
    },
    {
        "title": "Strings",
        "id": "/en/v1/making-custom-beats.html#strings",
        "text": "We need to understand the string data type to use makeBeat(). In Python, a string is a series of characters with single or double quotation marks around it, like \"Hello World!\" or 'This is a test sentence'. Strings are often used in programming to represent non-numerical data such as words, but can include numbers. For example, the string \"123 Ferst Dr.\" could represent an address, using numbers, spaces, letters, and punctuation. Like numbers (and other types of data), strings can be assigned to variables: address = \"123 Ferst Dr.\""
    },
    {
        "title": "Beat Patterns with Strings",
        "id": "/en/v1/making-custom-beats.html#beatpatternswithstrings",
        "text": "We use strings with makeBeat() to define rhythmic, or beat, patterns. In EarSketch, we can use beat pattern strings, or series of characters, to refer to sixteenth note sub-beats of a measure. A character can be a letter, number, whitespace, punctuation, or symbol, as a single unit of information. The configuration of characters allow us to place clips at specific places in the measure and define the clip\u2019s play length. Here is an example of a beat pattern string, assigned to a variable called myDrumBeat:"
    },
    {
        "title": "makeBeat()",
        "id": "/en/v1/making-custom-beats.html#makebeat",
        "text": "makeBeat() takes four arguments:"
    },
    {
        "title": "Chapter 11 Summary",
        "id": "/en/v1/making-custom-beats.html#chapter11summary",
        "text": "A string is a data type that consists of a series of characters encapsulated by single or double quotes. Strings are most often used to represent non-numerical data."
    },
    {
        "title": "Questions",
        "id": "/en/v1/making-custom-beats.html#chapter-questions",
        "text": "Which of these options is a string?"
    },
    {
        "title": "Looping",
        "id": "/en/v1/looping.html",
        "text": "Repetition is an important element of music. Computers can execute statements over and over again using a loop. In this chapter, we will learn about loops, using them to code more efficiently and add repetition to our music."
    },
    {
        "title": "The For-Loop",
        "id": "/en/v1/looping.html#theforloop",
        "text": "A for-loop tells the computer to execute a section of code repeatedly, a common notation in most programming languages. We can use for-loops to avoid repeated lines or sections of code. In Python, for-loops look like this:"
    },
    {
        "title": "Components of a For-Loop",
        "id": "/en/v1/looping.html#componentsofaforloop",
        "text": "For-loops in Python consist of 3 basic parts:"
    },
    {
        "title": "Example Loop",
        "id": "/en/v1/looping.html#exampleloop",
        "text": "Previously, we have created repetition in our music by typing fitMedia() again and again, with different measure numbers:"
    },
    {
        "title": "Following Control Flow",
        "id": "/en/v1/looping.html#followingcontrolflow",
        "text": "The interpreter reads and executes a script. The order it is executed in is called the control flow. It usually goes line by line, top to bottom. A loop is a control flow statement, which changes the order. At the end of a loop body, it jumps back to the top of the loop"
    },
    {
        "title": "Adding Effects with Loops",
        "id": "/en/v1/looping.html#addingeffectswithloops",
        "text": "Repeatedly adding media clips to a project is just one of many possible uses of for-loops in EarSketch. In the following video and example code, we use two loops to add clips to the DAW, and a third to add a panning effect on each track. Note: panning effects are more noticeable when using headphones."
    },
    {
        "title": "Automating Effects with Loops",
        "id": "/en/v1/looping.html#automatingeffectswithloops",
        "text": "For-loops can be used to apply repeated effects envelopes to tracks. In the example below, each iteration of the loop adds a one measure long segment of the envelope. Automating the GAIN parameter creates rhythmic volume fades, an effect popular in EDM. Try toggling the effect bypass to hear the difference the effect makes."
    },
    {
        "title": "Chapter 12 Summary",
        "id": "/en/v1/looping.html#chapter12summary",
        "text": "A for-loop instructs the computer to execute a code section repeatedly, creating more efficient code. For-loops consist of a loop body, loop counter, and range. The code in the loop body must be indented. Revisit for-loop syntax here."
    },
    {
        "title": "Questions",
        "id": "/en/v1/looping.html#chapter-questions",
        "text": "Which of the following is not a component of a for-loop?"
    },
    {
        "title": "String Operations",
        "id": "/en/v1/string-operations.html",
        "text": "Previously, the string data type was used to make beat strings for makeBeat(). Methods for modifying strings, string operations, are introduced in this chapter. Before we investigate these methods, let\u2019s look at a new way to make use of use custom functions."
    },
    {
        "title": "Return Statements",
        "id": "/en/v1/string-operations.html#returnstatements",
        "text": "Previously when we have called a function, we provide it some input (arguments) and then it simply executes its code block. What if we wanted to use a value generated inside a function later on, maybe outside the function?"
    },
    {
        "title": "String Concatenation",
        "id": "/en/v1/string-operations.html#stringconcatenation",
        "text": "Concatenation is a means to link strings together. In doing so, a new string is formed. For example, concatenating the strings \"hello\" and \"world\" yields \"helloworld\". Strings are concatenated with the + symbol, like in the following example. To view the new string we use the print statement to print the string to the console."
    },
    {
        "title": "Substrings",
        "id": "/en/v1/string-operations.html#substrings",
        "text": "A substring is partial string, also known as a slice, that occurs inside of a larger string. This allows a beat to be sliced up, a very popular technique in electronic music and remixing."
    },
    {
        "title": "Chapter 13 Summary",
        "id": "/en/v1/string-operations.html#chapter13summary",
        "text": "Concatenation is a means to link strings together, effectively forming a new string. It is used to form longer, more complex rhythms. In Python, strings are concatenated with the + symbol."
    },
    {
        "title": "Questions",
        "id": "/en/v1/string-operations.html#chapter-questions",
        "text": "What is the following code doing?"
    },
    {
        "title": "Musical Repetition",
        "id": "/en/v1/musical-repetition.html",
        "text": "This chapter takes a look at repetition and contrast as they pertain to music. More complex transition strategies are examined using these two elements."
    },
    {
        "title": "Repetition in Music",
        "id": "/en/v1/musical-repetition.html#repetitioninmusic",
        "text": "Repetition refers to repeated sounds or sequences of music. It is a key feature that is shared by almost all kinds of music throughout the world. Humans enjoy repetition because of what psychologists call the mere exposure effect. We like music or sections of music that we have consciously or unconsciously heard before. Furthermore, musical repetition has the profound effect of drawing the listener into the music, making us feel as if we are participating rather than just listening. Upon hearing a repeated section of music, the brain will try to imagine the next note before it is actually played. This same effect contributes to earworms, or music getting \"stuck\" in your head. Likewise, each time a section of music is repeated, the listener tends to notice different details of the piece. This is because the brain no longer has to focus on processing the raw melodic content."
    },
    {
        "title": "Contrast",
        "id": "/en/v1/musical-repetition.html#contrast",
        "text": "Contrast refers to differences in subsequent sections of music, providing an important balance with repetition. Contrast is used to enhance music, bringing new elements to the listener\u2019s attention. These new elements create interest and a sense of momentum. Musicians provide contrast by introducing a rhythmic change, a new melodic line or harmony, and variations in the instruments or sounds used. In popular music, the verse-chorus structure commonly makes use of contrast. While the chorus may borrow ideas from the verse, it is often fuller sounding. Transitions play an important role in musical structure by linking contrasting sections."
    },
    {
        "title": "Advanced Transition Techniques",
        "id": "/en/v1/musical-repetition.html#advancedtransitiontechniques",
        "text": "In Chapter 6, we examined some popular strategies for creating musical transitions. Implementing repetition and contrast with code allows more advanced techniques to be examined. Take a look at the following advanced techniques."
    },
    {
        "title": "Chapter 14 Summary",
        "id": "/en/v1/musical-repetition.html#chapter14summary",
        "text": "Repetition refers to repeated sounds or sequences of music. It it one of the universal traits of music, as it keeps the human brain occupied when listening."
    },
    {
        "title": "Questions",
        "id": "/en/v1/musical-repetition.html#chapter-questions",
        "text": "_ refers to repeated sections of music."
    },
    {
        "title": "Debugging Logic",
        "id": "/en/v1/debugging-logic.html",
        "text": "In this chapter, we define a series of steps to assist with the debugging process. We look at printing variables and other information to the console to help understand how a program is running and identify problems."
    },
    {
        "title": "Printing to the Console",
        "id": "/en/v1/debugging-logic.html#printingtotheconsole",
        "text": "Printing to the console helps you debug and learn the state of your program. The print statement evaluates its argument and displays it in the console. To evaluate an expression is to simplify it to its basic form, like showing what a variable or a mathematical expression equals. The expression that print evaluates can be any data type. Refer to Chapter 2 for a review of data types. Note that in Python, print is different from other functions because we do not use it with parentheses."
    },
    {
        "title": "The Debugging Process",
        "id": "/en/v1/debugging-logic.html#thedebuggingprocess",
        "text": "Printing, commenting, and the console can all be used to debug your code. Try following these steps if you run into an error."
    },
    {
        "title": "Common Errors",
        "id": "/en/v1/debugging-logic.html#commonerrors",
        "text": "The following list expands on some common errors covered previously and details some additional common errors."
    },
    {
        "title": "More Debugging Exercises",
        "id": "/en/v1/debugging-logic.html#moredebuggingexercises",
        "text": "The following exercises expand on the knowledge of common errors and how they can be handled in code."
    },
    {
        "title": "Chapter 15 Summary",
        "id": "/en/v1/debugging-logic.html#chapter15summary",
        "text": "The print statement evaluates its accompanying expression and displays the result in the console. It is a useful tool for debugging because it allows the programmer to learn the state of the program."
    },
    {
        "title": "Questions",
        "id": "/en/v1/debugging-logic.html#chapter-questions",
        "text": "Which of the following is not a recommended technique for debugging?"
    },
    {
        "title": "Evaluating Correctness: Part Two",
        "id": "/en/v1/evaluating-correctness-2.html",
        "text": "The idea of correct and complete code was examined in Chapter 8. Here, we further extend the concept of correctness to improve the overall conciseness and clarity of a script."
    },
    {
        "title": "Conciseness",
        "id": "/en/v1/evaluating-correctness-2.html#conciseness",
        "text": "Conciseness means brief, but comprehensive, code that accomplishes its goal efficiently. We have seen some examples of improving conciseness in previous chapters. For-loops can replace repetitive fitMedia() and makeBeat() calls. Custom functions package up repetitive blocks of code, allowing the same code to be easily reused. It is still important to note that conciseness should not sacrifice completeness."
    },
    {
        "title": "Clarity",
        "id": "/en/v1/evaluating-correctness-2.html#clarity",
        "text": "Clarity relates to how well code communicates its function and the programmer\u2019s intent. Others are likely to read your code at some point. If your peers are getting lost or confused by your code, it is probably unclear. In EarSketch, we can improve clarity by using appropriate variable and function names and using computational structures like loops and custom functions. For example, the name of a for-loop counter variable should reflect its purpose, like measure or track, whenever possible. Although it will not affect musical output, it is most logical to write code in the order sounds will appear in the DAW. Commenting is also essential; comment on any logic that may be confusing or challenging to understand, and add a short description of what each block of code does to help the user determine program flow."
    },
    {
        "title": "Script Headers",
        "id": "/en/v1/evaluating-correctness-2.html#scriptheaders",
        "text": "The script header is an important part of every EarSketch script. It is broken into four sections: language, script name, author, and description. The purpose of a script header is simple; it helps the programmer and others understand the function and purpose of the script. The description section of the header should make clear the main goals and objectives of the script. In this way, it is useful for checking the correctness and completeness of your script (refer back to Chapter 8). If your output does not match the description, a reevaluation of correctness is needed."
    },
    {
        "title": "Chapter 16 Summary",
        "id": "/en/v1/evaluating-correctness-2.html#chapter16summary",
        "text": "Concise code is brief, but comprehensive, and accomplishes its goal efficiently. However, writing code that is concise should not come at the expense of completeness."
    },
    {
        "title": "Unit 2 Summary",
        "id": "/en/v1/ch_u2_summary.html",
        "text": "The second unit covered concepts that allow code to be written more clearly and concisely. Additionally, new EarSketch functionality was introduced. Let\u2019s review."
    },
    {
        "title": "Unit 3 Introduction",
        "id": "/en/v1/ch_u3_intro.html",
        "text": "In the final unit of the EarSketch curriculum, we move beyond traditional composition techniques. A typical recording is fixed; you will hear the same music every time you press play. What if this wasn\u2019t the case? Imagine a piece of music that changed every time it was played. As you may have guessed, computer code makes this possible. In this unit, we will use EarSketch to create music that is dynamic and interactive. The same kinds of techniques we learn here are also used in music jukebox software like iTunes, in DJ apps, and in many other interactive music applications."
    },
    {
        "title": "Console Input and Conditionals",
        "id": "/en/v1/console-input-and-conditionals.html",
        "text": "This chapter covers methods for adding interactivity and decision making to programs."
    },
    {
        "title": "Console Input",
        "id": "/en/v1/console-input-and-conditionals.html#consoleinput",
        "text": "Printing to the console allows information to be displayed to the user. Console Input is text-based data taken from the keyboard, giving a program access to information from the user. Together, printing and console input can be used to allow the user to interact with a program."
    },
    {
        "title": "Booleans",
        "id": "/en/v1/console-input-and-conditionals.html#booleans",
        "text": "All computer decisions are based on conditions built out of a simple logic called Boolean Logic. The boolean data type has 2 possible values, True and False. This contrasts with the other data types (int, float, string) that have many possible values. The True and False values always start with a capital letter and, unlike string values, do not have quotes."
    },
    {
        "title": "Conditional Statements",
        "id": "/en/v1/console-input-and-conditionals.html#conditionalstatements",
        "text": "Boolean logic allows a program to make a decision based on a condition. A condition is an expression that evaluates to a boolean, either True or False.  The if statement executes specific lines of code only when its condition is True. Like other Python constructs, the lines of code to be executed are grouped into an indented block beneath the statement. Additionally, a colon (:) follows the statement. The syntax for an if statement is shown below."
    },
    {
        "title": "Chapter 17 Summary",
        "id": "/en/v1/console-input-and-conditionals.html#chapter17summary",
        "text": "A program can access information from the user via console input, text-based data taken from the keyboard. The readInput() function is used to take console input. It displays its argument to the user as a prompt."
    },
    {
        "title": "Questions",
        "id": "/en/v1/console-input-and-conditionals.html#chapter-questions",
        "text": "Which of the following would be considered an example of data type conversion?"
    },
    {
        "title": "Data Structures",
        "id": "/en/v1/data-structures.html",
        "text": "This chapter focuses on lists, also called arrays in some programming languages. Lists are a structure for efficiently storing data in EarSketch, especially audio clips. In addition, new functionality of makeBeat() is covered."
    },
    {
        "title": "Data Structure Basics",
        "id": "/en/v1/data-structures.html#datastructurebasics",
        "text": "A list is a collection of values combined into a single entity. They enable a single variable to store multiple items that can be easily retrieved. These items, referred to as list elements, can be any data type. We have seen lists created by the range() function previously. Now, we focus on manually created lists, using brackets ([])."
    },
    {
        "title": "Iterating Through a Data Structure",
        "id": "/en/v1/data-structures.html#iteratingthroughadatastructure",
        "text": "For-loops are a convenient way to read through a list from first to last index. The loop in the following example reads through myList and prints each string element in order. The len() function is used to determine how many loops are needed to iterate through the whole list."
    },
    {
        "title": "Using Data Structures with makeBeat",
        "id": "/en/v1/data-structures.html#usingdatastructureswithmakebeat",
        "text": "makeBeat() has the ability to handle multiple clips at once, allowing a single function call to trigger multiple samples. Passing in a beat string containing numbers 0 through 9 points makeBeat() to the list index of the corresponding sample. All clips must be stored in the same list to use this functionality. Check out the example below to see makeBeat() in action."
    },
    {
        "title": "Chapter 18 Summary",
        "id": "/en/v1/data-structures.html#chapter18summary",
        "text": "A list is a collection of values combined into a single entity, an efficient way to store data. Items stored within a list, or elements, can be any data type."
    },
    {
        "title": "Questions",
        "id": "/en/v1/data-structures.html#chapter-questions",
        "text": "What is the index number of the first element of a list in Python?"
    },
    {
        "title": "Data Structure Operations",
        "id": "/en/v1/data-structure-operations.html",
        "text": "This chapter covers two data structure operations: slicing and concatenation. Manipulation of these structures provides opportunities to create interesting musical changes."
    },
    {
        "title": "Procedure",
        "id": "/en/v1/data-structure-operations.html#procedure",
        "text": "List Operations are a set of tools for modifying a list. We performed similar operations on strings in Chapter 13. Slice notation can be used to create a subset of a list from a larger, existing list. Its syntax is newList = oldList[startIndex: endIndex]. As with string slices, the indices for slice notation are inclusive and exclusive, respectively."
    },
    {
        "title": "Chapter 19 Summary",
        "id": "/en/v1/data-structure-operations.html#chapter19summary",
        "text": "Lists can be concatenated and sliced using list operations, a set of tools for modifying a list."
    },
    {
        "title": "Questions",
        "id": "/en/v1/data-structure-operations.html#chapter-questions",
        "text": "Which of the following operations is used to join lists/arrays?"
    },
    {
        "title": "Randomness",
        "id": "/en/v1/randomness.html",
        "text": "Introducing randomness in music creates a sense of novelty, leading to a more improvisational feel. In this chapter, we turn some control over to the computer, allowing it to introduce elements of randomness into our music."
    },
    {
        "title": "Random numbers",
        "id": "/en/v1/randomness.html#randomnumbers",
        "text": "A random number is a generated value that is impossible to predict. A random integer can be generated in Python with the randint() function. randint() is part of Python\u2019s random API, so we need to import it as part of our script setup. Just like we import the EarSketch API with from earsketch import *, the random API is imported with from random import *."
    },
    {
        "title": "Remixing a Rhythm",
        "id": "/en/v1/randomness.html#remixingarhythm",
        "text": "Let\u2019s remix a popular rhythm, the amen break, by introducing a random drum pattern. The amen break is widely sampled in electronic music. The code for this particular rhythm is shown below. Two separate makeBeat() calls are used, one to handle the kick and snare, and the other for a series of cymbals. The beat strings used in these function calls are the result of concatenating a set of smaller substrings. This allows us to better understand the structure of the rhythm."
    },
    {
        "title": "Chapter 20 Summary",
        "id": "/en/v1/randomness.html#chapter20summary",
        "text": "Random numbers generated within a program are impossible to predict."
    },
    {
        "title": "Questions",
        "id": "/en/v1/randomness.html#chapter-questions",
        "text": "What set of numbers will randint(1,5) choose a random number from?"
    },
    {
        "title": "Evaluating Correctness: Part 3",
        "id": "/en/v1/evaluating-correctness-3.html",
        "text": "In Chapter 8 and Chapter 16, we examined how to personally ensure that our code is correct, complete, concise, and clear. Here we focus on using and giving peer feedback. Additionally, the process of sharing an EarSketch script is covered."
    },
    {
        "title": "Peer Feedback",
        "id": "/en/v1/evaluating-correctness-3.html#peerfeedback",
        "text": "Peer Feedback is the practice of exchanging constructive information between colleagues. It provides the opportunity to learn from each other. In programming, it can give you the chance to make improvements to the functionality, clarity, and correctness of code. In music, it can give you the chance to reflect on and revise musical form, pacing, track, sound, and effects content. Feedback is most effectively communicated if it is constructive, meaning it builds a peer up, rather them breaking them down."
    },
    {
        "title": "Critical Response Process",
        "id": "/en/v1/evaluating-correctness-3.html#criticalresponseprocess",
        "text": "There are many effective techniques for approaching a peer-review process. Here, we present just one: Critical Response Process (CRP), developed by choreographer Liz Lerman. This process is made up of four steps:"
    },
    {
        "title": "Collaboration",
        "id": "/en/v1/evaluating-correctness-3.html#collaboration",
        "text": "Working collaboratively can help you achieve more than working by yourself, allowing you to learn from your classmates and share your knowledge. Discovering your partner\u2019s strengths, as well as what you can bring to the table, is an important part of teamwork. Likewise, learning from your peers is a great resource. In coding and music practices, teams often work together to produce better products\u2014\u200bcomposers often team up with musicians, recording engineers, and producers to make an album. Similarly, programmers divide tasks and roles, such as in pair programming, where one individual \"drives\" (writes the code) and another person \"navigates\" (reviews each line as it is written). You should take turns being the \"driver\" and \"navigator,\" developing the skill sets needed for both roles!"
    },
    {
        "title": "Sharing an EarSketch Script",
        "id": "/en/v1/evaluating-correctness-3.html#sharinganearsketchscript",
        "text": "Let\u2019s walk through how to share an EarSketch Script step by step. Check out the following video or use the text below."
    },
    {
        "title": "Chapter 21 Summary",
        "id": "/en/v1/evaluating-correctness-3.html#chapter21summary",
        "text": "Exchanging constructive information with others is a form of peer feedback. It provides the opportunity to learn from others."
    },
    {
        "title": "Unit 3 Summary",
        "id": "/en/v1/ch_u3_summary.html",
        "text": "Let\u2019s review the last unit."
    }
]